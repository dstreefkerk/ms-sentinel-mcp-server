<!--
This file contains all of the markdown documentation from the project git://github.com/dstreefkerk/ms-sentinel-mcp-server.git.
 Generated automatically using Repomix.
-->

# Directory Structure
```
resources/
  markdown_templates/
    sentinel_workspace_get.md
  tool_docs/
    entra_id_get_group.md
    entra_id_get_user.md
    entra_id_list_groups.md
    entra_id_list_users.md
    llm_instructions_get.md
    log_analytics_saved_search_get.md
    log_analytics_saved_searches_list.md
    markdown_template_get.md
    markdown_templates_list.md
    sentinel_analytics_rule_get.md
    sentinel_analytics_rule_list.md
    sentinel_analytics_rule_template_get.md
    sentinel_analytics_rule_templates_count_by_tactic.md
    sentinel_analytics_rule_templates_count_by_technique.md
    sentinel_analytics_rule_templates_list.md
    sentinel_analytics_rules_count_by_tactic.md
    sentinel_analytics_rules_count_by_technique.md
    sentinel_authorization_summary.md
    sentinel_connectors_get.md
    sentinel_connectors_list.md
    sentinel_domain_whois_get.md
    sentinel_hunting_queries_count_by_tactic.md
    sentinel_hunting_queries_list.md
    sentinel_hunting_query_get.md
    sentinel_incident_details_get.md
    sentinel_ip_geodata_get.md
    sentinel_logs_search_with_dummy_data.md
    sentinel_logs_search.md
    sentinel_logs_table_details_get.md
    sentinel_logs_table_schema_get.md
    sentinel_logs_tables_list.md
    sentinel_metadata_get.md
    sentinel_metadata_list.md
    sentinel_ml_analytics_setting_get.md
    sentinel_ml_analytics_settings_list.md
    sentinel_query_validate.md
    sentinel_source_control_get.md
    sentinel_source_controls_list.md
    sentinel_watchlist_get.md
    sentinel_watchlist_item_get.md
    sentinel_watchlist_items_list.md
    sentinel_watchlists_list.md
    sentinel_workspace_get.md
    tool_docs_get.md
    tool_docs_list.md
    tool_docs_search.md
README.md
```

# Files

## File: resources/markdown_templates/sentinel_workspace_get.md
````markdown
# Azure Sentinel Workspace Details

**Workspace Name:** `{{ workspace_name }}`
**Resource Group:** `{{ resource_group }}`  
**Subscription:** `{{ subscription_id }}`  
**Location:** `{{ direct_info.location }}`  
**SKU:** `{{ direct_info.sku }}`
{% if direct_info.sku_description %}  _Description:_ {{ direct_info.sku_description }}{% endif %}
{% if direct_info.last_sku_update %}  _Last SKU Update:_ {{ direct_info.last_sku_update }}{% endif %}
**Retention (days):** `{{ direct_info.retention_period_days }}`  
**Daily Quota (GB):** `{{ direct_info.daily_quota_gb }}`  
**Quota Reset Time:** `{{ direct_info.quota_reset_time }}`  
**Ingestion Status:** `{{ direct_info.ingestion_status }}`  
**Public Network Access (Ingestion):** `{{ direct_info.public_network_access_ingestion }}`  
**Public Network Access (Query):** `{{ direct_info.public_network_access_query }}`  
**Created:** `{{ direct_info.created }}`  
**Last Modified:** `{{ direct_info.last_modified }}`  

{% if direct_info.features %}
## Workspace Features
{% if direct_info.features.additional_properties %}
{% for k, v in direct_info.features.additional_properties.items() %}- **{{ k }}:** `{{ v }}`
{% endfor %}
{% endif %}
{% for k, v in direct_info.features.items() %}{% if k != "additional_properties" %}- **{{ k }}:** `{{ v }}`
{% endif %}{% endfor %}
{% endif %}

{% if additional_information %}
## Additional Information
{% for line in additional_information %}- {{ line }}
{% endfor %}
{% endif %}
````

## File: resources/tool_docs/entra_id_get_group.md
````markdown
# Entra ID Get Group Tool

**Tool Name:** `entra_id_get_group`

**Description:**
Retrieves a single group from Microsoft Entra ID (Azure AD) by object ID, using the Microsoft Graph API.

---

## Parameters
- `group_id` (string, required): The object ID of the group to retrieve (e.g., `06adad8d-89b3-4b64-82b0-7d5e17dfac3f`).

---

## Returns
A JSON object representing the group, with fields including:
- `displayName`: The group's display name.
- `description`: The group's description.
- `id`: The unique object ID of the group.
- Additional fields may include `mail`, `mailNickname`, `securityEnabled`, etc.

---

## Example Output
```json
{
  "displayName": "sg-IT",
  "description": "All IT personnel",
  "id": "06adad8d-89b3-4b64-82b0-7d5e17dfac3f"
}
```

---

## Permissions Required
- `Group.Read.All` (Microsoft Graph)

---

## Error Handling
- Returns a permission error if the caller lacks the required Graph API permissions.
- Returns a clear error if the specified group does not exist or if the Graph API is unreachable.
- Returns an error if `group_id` is missing or invalid.

---

## Example Use Case
Use this tool to retrieve details for a specific group in your Azure AD tenant, for group lookups, automation, or audit purposes.

---

## Notes
NIL
````

## File: resources/tool_docs/entra_id_get_user.md
````markdown
# Entra ID Get User Tool

**Tool Name:** `entra_id_get_user`

**Description:**
Retrieves a single user from Microsoft Entra ID (Azure AD) by object ID, UPN (User Principal Name), or email address, using the Microsoft Graph API.

---

## Parameters
- `user_id` (string, optional): The object ID (e.g., `31d6905a-fb48-4e75-a41e-dbd214689352`) of the user to retrieve.
- `upn` (string, optional): The User Principal Name (UPN) of the user (e.g., `AdeleV@example.OnMicrosoft.com`).
- `email` (string, optional): The user's primary email address (e.g., `AdeleV@example.OnMicrosoft.com`).
 
**At least one of `user_id`, `upn`, or `email` must be provided.**

---

## Returns
A JSON object representing the user, with fields including:
- `displayName`: The user's display name.
- `userPrincipalName`: The user's UPN (login name).
- `mail`: The user's primary email address.
- `id`: The unique object ID of the user.
- Additional fields may include `givenName`, `surname`, `businessPhones`, etc.

---

## Example Output
```json
{
  "displayName": "Adele Vance",
  "userPrincipalName": "AdeleV@example.OnMicrosoft.com",
  "mail": "AdeleV@example.OnMicrosoft.com",
  "id": "31d6905a-fb48-4e75-a41e-dbd214689352"
}
```

## Example Usage
- Lookup by object ID:
  ```json
  { "user_id": "31d6905a-fb48-4e75-a41e-dbd214689352" }
  ```
- Lookup by UPN:
  ```json
  { "upn": "AdeleV@example.OnMicrosoft.com" }
  ```
- Lookup by email:
  ```json
  { "email": "AdeleV@example.OnMicrosoft.com" }
  ```

---

## Permissions Required
- `User.Read.All` (Microsoft Graph)

---

## Error Handling
- Returns a permission error if the caller lacks the required Graph API permissions.
- Returns a clear error if the specified user does not exist or if the Graph API is unreachable.
- Returns an error if none of `user_id`, `upn`, or `email` is provided.
- Returns an error if the specified user does not exist.

---

## Example Use Case
Use this tool to retrieve details for a specific user in your Azure AD tenant, for user lookups, automation, or audit purposes.

---

## Notes
NIL
````

## File: resources/tool_docs/entra_id_list_groups.md
````markdown
# Entra ID List Groups Tool

**Tool Name:** `entra_id_list_groups`

**Description:**
Lists all groups in Microsoft Entra ID (Azure AD) via the Microsoft Graph API.

---

## Parameters
_None_

---

## Returns
A JSON array of group objects, each containing (at minimum):
- `displayName`: The group's display name.
- `description`: The group's description.
- `id`: The unique object ID of the group.
- Additional fields may include `mail`, `mailNickname`, `securityEnabled`, etc.

---

## Example Output
```json
[
  {
    "displayName": "sg-IT",
    "description": "All IT personnel",
    "id": "06adad8d-89b3-4b64-82b0-7d5e17dfac3f"
  },
  // ...more groups
]
```

---

## Permissions Required
- `Group.Read.All` (Microsoft Graph)

---

## Error Handling
- Returns a permission error if the caller lacks the required Graph API permissions.
- Returns a clear error if the Graph API is unreachable or misconfigured.

---

## Example Use Case
Use this tool to enumerate all groups in your Azure AD tenant, for reporting, automation, or auditing.

---

## Notes
- For large tenants, paging is handled automatically.
````

## File: resources/tool_docs/entra_id_list_users.md
````markdown
# Entra ID List Users Tool

**Tool Name:** `entra_id_list_users`

**Description:**
Lists all users in Microsoft Entra ID (Azure AD) via the Microsoft Graph API.

---

## Parameters
_None_

---

## Returns
A JSON array of user objects, each containing (at minimum):
- `displayName`: The user's display name.
- `userPrincipalName`: The user's UPN (login name).
- `mail`: The user's primary email address.
- `id`: The unique object ID of the user.
- Additional fields may include `givenName`, `surname`, `businessPhones`, etc.

---

## Example Output
```json
[
  {
    "displayName": "Adele Vance",
    "userPrincipalName": "AdeleV@example.OnMicrosoft.com",
    "mail": "AdeleV@example.OnMicrosoft.com",
    "id": "31d6905a-fb48-4e75-a41e-dbd214689352"
  },
  {
    "displayName": "Alex Wilber",
    "userPrincipalName": "AlexW@example.OnMicrosoft.com",
    "mail": "AlexW@example.OnMicrosoft.com",
    "id": "4c56c3b6-a237-40ca-8d53-1ea68a4961d8"
  }
  // ...more users
]
```

---

## Permissions Required
- `User.Read.All` (Microsoft Graph)

---

## Error Handling
- Returns a permission error if the caller lacks the required Graph API permissions.
- Returns a clear error if the Graph API is unreachable or misconfigured.

---

## Example Use Case
Use this tool to enumerate all users in your Azure AD tenant, e.g., for reporting, auditing, or automation workflows.

---

## Notes
- For large tenants, paging is handled automatically.
````

## File: resources/tool_docs/llm_instructions_get.md
````markdown
# LLM Instructions Get Tool

**Tool Name:** `llm_instructions_get`

## Overview
Retrieves the LLM usage instructions for the Sentinel MCP Server. This tool should be called before all other tools to understand LLM-specific guidelines and requirements.

## Parameters
- None

## Output
- `content` (str): Raw markdown content of the LLM instructions file (typically `docs/llm_instructions.md`).
- If error, returns a dict with `error` (str).

## Example Requests
### Get LLM usage instructions
```
{}
```

## Example Output
```
{
  "content": "# LLM Usage Instructions

- Use fictional placeholders for all workspace details...
..."
}
```

## Error Handling
- Returns `error` if the instructions file cannot be read.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust error handling.
````

## File: resources/tool_docs/log_analytics_saved_search_get.md
````markdown
# Log Analytics Saved Search Get

## Purpose

This tool retrieves detailed information about a specific saved search in the Log Analytics workspace by its ID. Saved searches are stored queries that can be reused and shared, and are often used for common monitoring scenarios or as the basis for alert rules in Microsoft Sentinel.

## Parameters

| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| saved_search_id | String | Yes | The ID of the saved search to retrieve. This is the name portion of the saved search resource ID, such as "LogManagement(workspace-name)_General\|StaleComputers" |

## Output Fields

| Field | Type | Description |
|-------|------|-------------|
| savedSearch | Object | The saved search details |
| savedSearch.id | String | Full resource ID of the saved search |
| savedSearch.name | String | Name/identifier of the saved search |
| savedSearch.type | String | Resource type (Microsoft.OperationalInsights/savedSearches) |
| savedSearch.category | String | Category of the saved search (e.g., "General Exploration") |
| savedSearch.displayName | String | Human-readable name of the saved search |
| savedSearch.query | String | The KQL query text of the saved search |
| savedSearch.version | Integer | Version number of the saved search |
| savedSearch.functionAlias | String | Function alias if the saved search is published as a function (may be null) |
| valid | Boolean | Indicates if the operation was successful |
| error | String | Error message if the operation failed (only present on error) |

## Example Request

```json
{
  "tool": "log_analytics_saved_search_get",
  "saved_search_id": "LogManagement(workspace-name)_General|StaleComputers"
}
```

## Example Response

```json
{
  "savedSearch": {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/LogManagement(<workspace-name>)_General|StaleComputers",
    "name": "LogManagement(<workspace-name>)_General|StaleComputers",
    "type": "Microsoft.OperationalInsights/savedSearches",
    "category": "General Exploration",
    "displayName": "Stale Computers (data older than 24 hours)",
    "query": "search not(ObjectName == \"Advisor Metrics\" or ObjectName == \"ManagedSpace\") | summarize lastdata = max(TimeGenerated) by Computer | limit 500000 | where lastdata < ago(24h)
// Oql: NOT(ObjectName=\"Advisor Metrics\" OR ObjectName=ManagedSpace) | measure max(TimeGenerated) as lastdata by Computer | top 500000 | where lastdata < NOW-24HOURS",
    "version": 2
  },
  "valid": true
}
```

## Usage Notes

- This tool requires proper Azure authentication and permissions to access the Log Analytics workspace.
- The saved search ID is the name portion of the resource ID, not the full resource ID.
- To find available saved search IDs, use the `log_analytics_saved_searches_list` tool first.
- The response includes the full KQL query text, which can be used to understand or modify the saved search.
- Some fields may be null or missing depending on the saved search configuration.

## Error Cases

| Error | Description |
|-------|-------------|
| "saved_search_id parameter is required" | The required saved_search_id parameter was not provided |
| "Missing Azure SDK or workspace details." | The required Azure SDK modules are not available or workspace configuration is missing |
| "Azure LogAnalytics client initialization failed: {error}" | Failed to initialize the Azure LogAnalytics client |
| "Azure LogAnalytics client is not initialized" | The Azure LogAnalytics client could not be initialized |
| "Error retrieving saved search ID {saved_search_id}: {error}" | An error occurred while retrieving the saved search from the Azure API |

## See Also

- [log_analytics_saved_searches_list](log_analytics_saved_searches_list.md) - List all saved searches in a workspace
- [Azure Log Analytics Documentation](https://docs.microsoft.com/azure/azure-monitor/logs/log-analytics-overview)
````

## File: resources/tool_docs/log_analytics_saved_searches_list.md
````markdown
# Log Analytics Saved Searches List

## Purpose

This tool retrieves a list of all saved searches in the current Log Analytics workspace. Saved searches are stored queries that can be reused and shared, and are often used for common monitoring scenarios or as the basis for alert rules in Microsoft Sentinel.

## Parameters

| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| None | | | This tool does not require any parameters |

## Output Fields

| Field | Type | Description |
|-------|------|-------------|
| savedSearches | Array | List of saved search objects |
| savedSearches[].id | String | Full resource ID of the saved search |
| savedSearches[].name | String | Name/identifier of the saved search |
| savedSearches[].type | String | Resource type (Microsoft.OperationalInsights/savedSearches) |
| count | Integer | Total number of saved searches returned |
| valid | Boolean | Indicates if the operation was successful |
| error | String | Error message if the operation failed (only present on error) |

## Example Request

```json
{
  "tool": "log_analytics_saved_searches_list"
}
```

## Example Response

```json
{
  "savedSearches": [
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/LogManagement(<workspace-name>)_General|StaleComputers",
      "name": "LogManagement(<workspace-name>)_General|StaleComputers",
      "type": "Microsoft.OperationalInsights/savedSearches"
    },
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/LogManagement(<workspace-name>)_General|dataTypeDistribution",
      "name": "LogManagement(<workspace-name>)_General|dataTypeDistribution",
      "type": "Microsoft.OperationalInsights/savedSearches"
    }
    // Additional saved searches...
  ],
  "count": 76,
  "valid": true
}
```

## Usage Notes

- This tool requires proper Azure authentication and permissions to access the Log Analytics workspace.
- The tool returns basic information about each saved search. To get detailed information about a specific saved search, use the `log_analytics_saved_search_get` tool with the saved search ID.
- The response may be large if there are many saved searches in the workspace.
- The saved searches are returned in the order provided by the Azure API.

## Error Cases

| Error | Description |
|-------|-------------|
| "Missing Azure SDK or workspace details." | The required Azure SDK modules are not available or workspace configuration is missing |
| "Azure LogAnalytics client initialization failed: {error}" | Failed to initialize the Azure LogAnalytics client |
| "Azure LogAnalytics client is not initialized" | The Azure LogAnalytics client could not be initialized |
| "Error retrieving saved searches: {error}" | An error occurred while retrieving saved searches from the Azure API |

## See Also

- [log_analytics_saved_search_get](log_analytics_saved_search_get.md) - Get details for a specific saved search
- [Azure Log Analytics Documentation](https://docs.microsoft.com/azure/azure-monitor/logs/log-analytics-overview)
````

## File: resources/tool_docs/markdown_template_get.md
````markdown
# Markdown Template Get Tool

## Purpose
Retrieves the raw markdown content for a specific template by name. This tool allows users to access template content for rendering or reference purposes.

## Parameters
| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| name | string | Yes | Name of the markdown template (without .md extension) |

## Output Fields
| Field | Type | Description |
|-------|------|-------------|
| content | string | Raw markdown content of the template |
| error | string | Error message if the operation failed (only present on error) |
| available_templates | array[string] | List of available template names (only present when template not found) |

## Example Request
```json
{
  "name": "sentinel_workspace_get"
}
```

## Example Response
```json
{
  "content": "# Azure Sentinel Workspace Details

**Workspace Name:** `{{ workspace_name }}`
**Resource Group:** `{{ resource_group }}`
**Subscription:** `{{ subscription_id }}`
**Location:** `{{ direct_info.location }}`
**SKU:** `{{ direct_info.sku }}`
{% if direct_info.sku_description %}  _Description:_ {{ direct_info.sku_description }}{% endif %}
..."
}
```

## Usage Notes
- Templates are stored in the `resources/markdown_templates` directory with a `.md` extension
- The template name should be provided without the `.md` extension
- Templates can use Jinja2 syntax for variable substitution and control flow
- If the requested template doesn't exist, the tool will return a list of available templates

## Error Cases
| Error | Description |
|-------|-------------|
| "Missing or invalid required parameter: name" | The name parameter is missing or invalid |
| "Markdown templates directory does not exist: {path}" | The templates directory cannot be found |
| "Markdown template not found: {name}" | The requested template doesn't exist |
| "Failed to read markdown template: {error}" | An error occurred while reading the template file |
| "Failed to get markdown template: {error}" | An unexpected error occurred |

## See Also
- [markdown_templates_list](markdown_templates_list.md) - List all available markdown templates
````

## File: resources/tool_docs/markdown_templates_list.md
````markdown
# Markdown Templates List Tool

## Purpose
Lists all available markdown templates in the system with their names, URIs, descriptions, and content. This tool helps users discover available templates that can be used for formatting and presenting data in a consistent way.

## Parameters
| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| None | | | This tool does not require any parameters |

## Output Fields
| Field | Type | Description |
|-------|------|-------------|
| templates | array | List of template objects |
| templates[].name | string | Name of the template (without .md extension) |
| templates[].uri | string | URI reference to the template (format: markdown://templates/{name}) |
| templates[].description | string | Short description of the template (first line of the file if it starts with #) |
| templates[].content | string | Full markdown content of the template |
| error | string | Error message if the operation failed (only present on error) |

## Example Request
```json
{
  "kwargs": {}
}
```

## Example Response
```json
{
  "templates": [
    {
      "name": "sentinel_workspace_get",
      "uri": "markdown://templates/sentinel_workspace_get",
      "description": "# Azure Sentinel Workspace Details",
      "content": "# Azure Sentinel Workspace Details

**Workspace Name:** `{{ workspace_name }}`
**Resource Group:** `{{ resource_group }}`
**Subscription:** `{{ subscription_id }}`
**Location:** `{{ direct_info.location }}`
**SKU:** `{{ direct_info.sku }}`
{% if direct_info.sku_description %}  _Description:_ {{ direct_info.sku_description }}{% endif %}
..."
    }
  ]
}
```

## Usage Notes
- Templates are stored in the `resources/markdown_templates` directory with a `.md` extension
- Templates can use Jinja2 syntax for variable substitution and control flow
- The description is automatically extracted from the first line of the template if it starts with a # (markdown heading)

## Error Cases
| Error | Description |
|-------|-------------|
| "Markdown templates directory does not exist: {path}" | The templates directory cannot be found |
| "Failed to list markdown templates: {error}" | An unexpected error occurred while listing templates |

## See Also
- [markdown_template_get](markdown_template_get.md) - Get a specific markdown template by name
````

## File: resources/tool_docs/sentinel_analytics_rule_get.md
````markdown
# Sentinel Analytics Rule Get Tool

**Tool Name:** `sentinel_analytics_rule_get`

## Overview
Retrieves details for a specific Microsoft Sentinel analytics rule by its ID or name.

## Parameters
- `id` (str, required): The full resource ID or unique name of the analytics rule.

## Output
- Dict containing all available fields for the rule, e.g.:
    - `id` (str): Rule ID.
    - `name` (str): Rule name.
    - `display_name` (str): Display name.
    - `enabled` (bool): Whether the rule is enabled.
    - `severity` (str): Severity level.
    - `description` (str): Description.
    - `query` (str): KQL query (if applicable).
    - `kind` (str): Rule kind/type.
    - ... (all other rule properties)
- If error, returns a dict with `error` (str).

## Example Output
```
{
  "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace>/providers/Microsoft.SecurityInsights/alertRules/BuiltInFusion",
  "name": "BuiltInFusion",
  "kind": "Fusion",
  "displayName": "Advanced Multistage Attack Detection",
  "severity": "High",
  "enabled": true,
  "description": "Microsoft Sentinel uses Fusion, a correlation engine based on scalable machine learning algorithms, to automatically detect multistage attacks by identifying combinations of anomalous behaviors and suspicious activities that are observed at various stages of the kill chain. ...",
  "last_modified_utc": "2025-04-07T11:33:33.084728Z",
  "tactics": [
    "Collection",
    "CommandAndControl",
    "CredentialAccess",
    "DefenseEvasion",
    "Discovery",
    "Execution",
    "Exfiltration",
    "Impact",
    "InitialAccess",
    "LateralMovement",
    "Persistence",
    "PrivilegeEscalation"
  ]
}
```

## Error Handling
- Returns `error` field if context is missing, rule not found, or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_analytics_rule_list.md
````markdown
# Sentinel Analytics Rule List Tool

**Tool Name:** `sentinel_analytics_rule_list`

## Overview
Lists all Microsoft Sentinel analytics rules in the current workspace, returning key fields for each rule.

## Parameters
- None required. Uses workspace context from MCP server or environment variables.

## Output
- List of dicts, each containing:
    - `id` (str): Rule ID.
    - `name` (str): Rule name.
    - `display_name` (str): Display name of the rule.
    - `enabled` (bool): Whether the rule is enabled.
    - `severity` (str): Severity level.
    - `description` (str): Description of the rule.
    - `last_modified_utc` (str): Last modification date/time (UTC).
    - `kind` (str): Rule kind/type.
    - ... (other available summary fields)
- If error, returns a dict with `error` (str).

## Example Output
```
[
  {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace>/providers/Microsoft.SecurityInsights/alertRules/BuiltInFusion",
    "name": "BuiltInFusion",
    "kind": "Fusion",
    "displayName": "Advanced Multistage Attack Detection",
    "severity": "High",
    "enabled": true
  },
  {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace>/providers/Microsoft.SecurityInsights/alertRules/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "name": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "kind": "Scheduled",
    "displayName": "New CloudShell User",
    "severity": "Low",
    "enabled": true
  },
  ...
]
```

## Error Handling
- Returns `error` field if context is missing or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_analytics_rule_template_get.md
````markdown
# Sentinel Analytics Rule Template Get Tool

**Tool Name:** `sentinel_analytics_rule_template_get`

## Overview
Retrieves details for a specific Microsoft Sentinel analytics rule template by its ID or name.

## Parameters
- `id` (str, required): The full resource ID or unique name of the analytics rule template.

## Output
- Dict containing all available fields for the template, e.g.:
    - `id` (str): Template ID.
    - `name` (str): Template name.
    - `display_name` (str): Display name.
    - `description` (str): Description.
    - `tactics` (list): List of MITRE tactics (if available).
    - `techniques` (list): List of MITRE techniques (if available).
    - ... (all other template properties)
- If error, returns a dict with `error` (str).

## Example Output
```
{
  "id": "/subscriptions/.../AlertRuleTemplates/abcde",
  "name": "TemplateName",
  "display_name": "Template Display Name",
  "description": "Detects ...",
  "tactics": ["collection", "exfiltration"],
  "techniques": ["T1005", "T1020"]
  ...
}
```

## Error Handling
- Returns `error` field if context is missing, template not found, or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_analytics_rule_templates_count_by_tactic.md
````markdown
# Sentinel Analytics Rule Templates Count By Tactic Tool

**Tool Name:** `sentinel_analytics_rule_templates_count_by_tactic`

## Overview
Counts Microsoft Sentinel analytics rule templates by MITRE ATT&CK tactic. Returns a mapping of each tactic to the count and a list of template summaries.

## Parameters
- None required. Uses workspace context from MCP server or environment variables.

## Output
- `valid` (bool): True if query succeeded.
- `error` (str or None): Error message if any.
- `results` (dict):
    - Each key is a tactic (lowercase string or "unknown").
    - Each value is a dict with:
        - `count` (int): Number of templates for this tactic.
        - `templates` (list): List of dicts with `id` and `display_name` for each template.
- `errors` (list): List of error strings if any.

## Example Output
```
{
  "initialaccess": {
    "count": 115,
    "templates": [
      {"id": "...", "display_name": "Sign-ins from IPs that attempt sign-ins to disabled accounts"},
      ...
    ]
  },
  ...
}
```

## Error Handling
- Returns `error` and `errors` fields if context is missing or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_analytics_rule_templates_count_by_technique.md
````markdown
# Sentinel Analytics Rule Templates Count By Technique Tool

**Tool Name:** `sentinel_analytics_rule_templates_count_by_technique`

## Overview
Counts Microsoft Sentinel analytics rule templates by MITRE ATT&CK technique (or comma-separated list of techniques). Returns a mapping of each technique to the count and a list of template summaries.

## Parameters
- None required. Uses workspace context from MCP server or environment variables.

## Output
- `valid` (bool): True if query succeeded.
- `error` (str or None): Error message if any.
- `results` (dict):
    - Each key is a technique (lowercase string or "unknown").
    - Each value is a dict with:
        - `count` (int): Number of templates for this technique.
        - `templates` (list): List of dicts with `id` and `display_name` for each template.
- `errors` (list): List of error strings if any.

## Example Output
```
{
  "unknown": {
    "count": 477,
    "templates": [
      {"id": "...", "display_name": "Sign-ins from IPs that attempt sign-ins to disabled accounts"},
      ...
    ]
  },
  ...
}
```

## Error Handling
- Returns `error` and `errors` fields if context is missing or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_analytics_rule_templates_list.md
````markdown
# Sentinel Analytics Rule Templates List Tool

**Tool Name:** `sentinel_analytics_rule_templates_list`

## Overview
Lists all Microsoft Sentinel analytics rule templates in the current workspace, returning key fields for each template.

## Parameters
- None required. Uses workspace context from MCP server or environment variables.

## Output
- List of dicts, each containing:
    - `id` (str): Template ID.
    - `name` (str): Template name.
    - `display_name` (str): Display name of the template.
    - `description` (str): Description of the template.
    - `tactics` (list): List of MITRE tactics (if available).
    - `techniques` (list): List of MITRE techniques (if available).
    - ... (other available summary fields)
- If error, returns a dict with `error` (str).

## Example Output
```
[
  {
    "id": "/subscriptions/.../AlertRuleTemplates/abcde",
    "name": "TemplateName",
    "display_name": "Template Display Name",
    "description": "Detects ...",
    "tactics": ["collection", "exfiltration"],
    "techniques": ["T1005", "T1020"]
  },
  ...
]
```

## Error Handling
- Returns `error` field if context is missing or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_analytics_rules_count_by_tactic.md
````markdown
# Sentinel Analytics Rules Count By Tactic Tool

**Tool Name:** `sentinel_analytics_rules_count_by_tactic`

## Overview
Counts Microsoft Sentinel analytics rules by MITRE ATT&CK tactic. Returns a mapping of each tactic to the count and a list of rule summaries.

## Parameters
- None required. Uses workspace context from MCP server or environment variables.

## Output
- `valid` (bool): True if query succeeded.
- `error` (str or None): Error message if any.
- `results` (dict):
    - Each key is a tactic (lowercase string or "unknown").
    - Each value is a dict with:
        - `count` (int): Number of rules for this tactic.
        - `rules` (list): List of dicts with `id` and `display_name` for each rule.
- `errors` (list): List of error strings if any.

## Example Output
```
{
  "collection": {
    "count": 5,
    "rules": [
      {"id": "...", "display_name": "Advanced Multistage Attack Detection"},
      ...
    ]
  },
  ...
}
```

## Error Handling
- Returns `error` and `errors` fields if context is missing or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_analytics_rules_count_by_technique.md
````markdown
# Sentinel Analytics Rules Count By Technique Tool

**Tool Name:** `sentinel_analytics_rules_count_by_technique`

## Overview
Counts Microsoft Sentinel analytics rules by MITRE ATT&CK technique (or comma-separated list of techniques). Returns a mapping of each technique to the count and a list of rule summaries.

## Parameters
- None required. Uses workspace context from MCP server or environment variables.

## Output
- `valid` (bool): True if query succeeded.
- `error` (str or None): Error message if any.
- `results` (dict):
    - Each key is a technique (lowercase string or "unknown").
    - Each value is a dict with:
        - `count` (int): Number of rules for this technique.
        - `rules` (list): List of dicts with `id` and `display_name` for each rule.
- `errors` (list): List of error strings if any.

## Example Output
```
{
  "unknown": {
    "count": 28,
    "rules": [
      {"id": "...", "display_name": "Advanced Multistage Attack Detection"},
      ...
    ]
  },
  ...
}
```

## Error Handling
- Returns `error` and `errors` fields if context is missing or SDK/API errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust Azure context extraction and error handling.
````

## File: resources/tool_docs/sentinel_authorization_summary.md
````markdown
# sentinel_authorization_summary

## Purpose
Summarize Azure RBAC role assignments for Microsoft Sentinel and Log Analytics, reporting effective read permissions and key role assignments for the current identity.

## Parameters
| Name               | Type   | Required | Description                                                        |
|--------------------|--------|----------|--------------------------------------------------------------------|
| kwargs             | dict   | No       | Additional parameters (not used, for future extensibility)         |

## Output Fields
| Key                   | Type    | Description                                                                 |
|-----------------------|---------|-----------------------------------------------------------------------------|
| workspace             | dict    | Workspace and scope context (IDs, names, tried scopes)                      |
| role_assignments      | list    | List of role assignments (see below for fields)                             |
| permissions_assessment| dict    | Assessment of Sentinel/Log Analytics read access and covered scopes          |
| summary               | dict    | Summary counts and error list                                               |
| error                 | string  | Error message if any error occurred                                         |

### role_assignments fields
| Field                 | Type    | Description                                                                 |
|-----------------------|---------|-----------------------------------------------------------------------------|
| role_assignment_id    | string  | Azure role assignment resource ID                                            |
| principal_id          | string  | Azure AD object ID of the principal                                         |
| scope                 | string  | Azure scope of the assignment                                               |
| role_definition_id    | string  | Role definition ID                                                          |
| role_name             | string  | Role name                                                                   |
| description           | string  | Role description                                                            |
| category              | string  | Role category (e.g. BuiltInRole)                                            |
| is_read               | bool    | True if role is considered a 'read' role                                    |
| is_sentinel_read      | bool    | True if role is a recognized Sentinel read role                             |
| is_log_analytics_read | bool    | True if role is a recognized Log Analytics read role                        |

## Example Request
```
{
  "kwargs": {}
}
```

## Example Response
```
{
  "workspace": {
    "subscription_id": "...",
    "resource_group": "...",
    "workspace_name": "...",
    "workspace_id": "...",
    "scope_used": "...",
    "scopes_tried": ["...", "...", "..."]
  },
  "role_assignments": [
    {
      "role_assignment_id": "...",
      "principal_id": "...",
      "scope": "...",
      "role_definition_id": "...",
      "role_name": "Log Analytics Contributor",
      "description": "...",
      "category": "BuiltInRole",
      "is_read": true,
      "is_sentinel_read": false,
      "is_log_analytics_read": false
    }
  ],
  "permissions_assessment": {
    "has_sentinel_read": true,
    "has_log_analytics_read": true,
    "read_scopes": ["...", "..."]
  },
  "summary": {
    "sentinel_read_roles": 1,
    "log_analytics_read_roles": 1,
    "total_roles": 14,
    "scopes_with_read_access": 4,
    "errors": []
  }
}
```

## Usage Notes
- Requires Azure credentials and workspace context, provided via MCP or environment variables.
- Returns all output keys even on error for robust testability.
- Uses both direct and nested kwargs for parameter extraction.

## Error Cases
- Missing Azure context or credentials: returns 'error' with details and empty lists for other fields.
- Azure SDK errors: returns 'error' with exception type and message, plus partial output if available.

## See Also
- [sentinel_incident_details_get.md](sentinel_incident_details_get.md)
- [tool-architecture-and-implementation-requirements.md](../docs/architecture/tool-architecture-and-implementation-requirements.md)
````

## File: resources/tool_docs/sentinel_connectors_get.md
````markdown
# SentinelConnectorsGetTool

## Purpose
Retrieve a specific Azure Sentinel data connector by its ID. Supports both MCP server context and direct invocation (with environment variable fallback).

## Parameters
| Name             | Type   | Required | Description                                    |
|------------------|--------|----------|------------------------------------------------|
| data_connector_id| str    | Yes      | The Azure resource ID of the data connector    |
| kwargs           | dict   | No       | Additional parameters (not used for this tool) |

## Output Fields
| Name        | Type   | Description                                                                 |
|-------------|--------|-----------------------------------------------------------------------------|
| name        | str    | Name of the connector                                                       |
| type        | str    | Azure resource type                                                         |
| kind        | str    | Connector kind/type                                                         |
| id          | str    | Azure resource ID                                                           |
| etag        | str    | ETag                                                                        |
| properties  | dict   | Additional connector properties                                             |
| error       | str    | Error message, if applicable                                                |

## Example Request
```json
{
  "data_connector_id": "/subscriptions/.../dataConnectors/abcd1234"
}
```

## Example Response
```json
{
  "name": "MyConnector",
  "type": "Microsoft.OperationalInsights/workspaces/dataConnectors",
  "kind": "AzureActiveDirectory",
  "id": "/subscriptions/.../dataConnectors/abcd1234",
  "etag": "...",
  "properties": {"tenantId": "...", ...}
}
```

## Usage Notes
- Requires Azure Security Insights API permissions.
- The `data_connector_id` parameter must be a valid Azure resource ID.
- Supports both MCP server context and direct invocation for integration tests.

## Error Cases
| Error Message                                   | Meaning                                    |
|------------------------------------------------|--------------------------------------------|
| "Azure Security Insights SDK is not available."| Required SDK is not installed.             |
| "Missing required parameter: data_connector_id" | The required parameter was not provided.    |
| "Workspace name is not configured..."           | Workspace name missing in context/env.      |
| "Security Insights client is not initialized..."| Client construction failed.                |
| "Error getting data connector: ..."             | Exception occurred during API call.        |

## See Also
- [sentinel_connectors_list.md](sentinel_connectors_list.md)
- [Official Azure Docs](https://learn.microsoft.com/en-us/azure/sentinel/connect-data-sources)
````

## File: resources/tool_docs/sentinel_connectors_list.md
````markdown
# SentinelConnectorsListTool

## Purpose
List all data connectors in an Azure Sentinel workspace using the Azure Security Insights API. Supports both MCP server context and direct invocation (with environment variable fallback).

## Parameters
| Name            | Type   | Required | Description                                             |
|-----------------|--------|----------|---------------------------------------------------------|
| kwargs          | dict   | Yes      | Additional parameters (not used for this tool)          |

## Output Fields
| Name        | Type   | Description                                                                 |
|-------------|--------|-----------------------------------------------------------------------------|
| count       | int    | The number of data connectors returned.                                      |
| connectors  | list   | List of connector objects (see below).                                       |
| note        | str    | Warning about Azure API limitations.                                         |
| error       | str    | Error message, if applicable.                                               |

### Connector Object
| Name   | Type   | Description                 |
|--------|--------|-----------------------------|
| name   | str    | Name of the connector       |
| kind   | str    | Connector kind/type         |
| id     | str    | Azure resource ID           |
| etag   | str    | ETag                        |
| type   | str    | Azure resource type         |

## Example Request
```json
{
  "kwargs": {}
}
```

## Example Response
```json
{
  "count": 2,
  "connectors": [
    {"name": "MyConnector", "kind": "AzureActiveDirectory", "id": "/subscriptions/...", "etag": "...", "type": "Microsoft.OperationalInsights/workspaces/dataConnectors"},
    {"name": "OtherConnector", "kind": "ThreatIntelligence", "id": "/subscriptions/...", "etag": "...", "type": "Microsoft.OperationalInsights/workspaces/dataConnectors"}
  ],
  "note": "⚠️ Connector list may be incomplete. Built-in and gallery-deployed connectors are not included due to Azure API limitations. Manual verification recommended."
}
```

## Usage Notes
- Requires Azure Security Insights API permissions.
- Built-in and gallery connectors may not be listed due to API limitations.
- Supports both MCP server context and direct invocation for integration tests.

## Error Cases
| Error Message                                             | Meaning                                    |
|----------------------------------------------------------|--------------------------------------------|
| "Azure Security Insights SDK is not available."          | Required SDK is not installed.             |
| "Workspace name is not configured..."                    | Workspace name missing in context/env.      |
| "Security Insights client is not initialized..."         | Client construction failed.                |
| "Error listing data connectors: ..."                     | Exception occurred during API call.        |

## See Also
- [sentinel_connectors_get.md](sentinel_connectors_get.md)
- [Official Azure Docs](https://learn.microsoft.com/en-us/azure/sentinel/connect-data-sources)
````

## File: resources/tool_docs/sentinel_domain_whois_get.md
````markdown
# sentinel_domain_whois_get

## Description
Get WHOIS information for a domain using Microsoft Sentinel's enrichment API.

## Parameters

| Parameter | Type   | Required | Description                     |
|-----------|--------|----------|---------------------------------|
| domain    | string | Yes      | The domain name to look up      |

## Returns

| Field   | Type   | Description                                |
|---------|--------|--------------------------------------------|
| whois   | object | WHOIS data for the specified domain        |
| valid   | bool   | Whether the operation was successful       |

### WHOIS Object Fields

| Field       | Type   | Description                                       |
|-------------|--------|---------------------------------------------------|
| domain      | string | The domain that was looked up                     |
| server      | string | WHOIS server used for the lookup                  |
| created     | string | Domain creation date (ISO 8601 format)            |
| updated     | string | Last update date (ISO 8601 format)                |
| expires     | string | Expiration date (ISO 8601 format)                 |
| parsed_whois| object | Structured WHOIS data                             |

### parsed_whois Object Fields

| Field       | Type   | Description                                       |
|-------------|--------|---------------------------------------------------|
| registrar   | object | Information about the domain registrar            |
| contacts    | object | Contact information for domain roles              |
| name_servers| array  | List of domain name servers                       |
| statuses    | array  | Domain status codes                               |

#### registrar Object Fields

| Field              | Type   | Description                                       |
|--------------------|--------|---------------------------------------------------|
| name               | string | Registrar company name                            |
| abuse_contact_email| string | Email for abuse reports                           |
| abuse_contact_phone| string | Phone number for abuse reports                    |
| iana_id            | string | IANA ID of the registrar                          |
| url                | string | Registrar URL                                     |
| whois_server       | string | Registrar's WHOIS server                          |

#### contacts Object Fields
Contains admin, billing, registrant, and tech objects, each with the following fields:

| Field       | Type   | Description                                       |
|-------------|--------|---------------------------------------------------|
| name        | string | Contact name                                      |
| org         | string | Organization name                                 |
| street      | array  | Street address lines                              |
| city        | string | City                                              |
| state       | string | State or province                                 |
| postal      | string | Postal code                                       |
| country     | string | Country code                                      |
| phone       | string | Phone number                                      |
| fax         | string | Fax number                                        |
| email       | string | Email address                                     |

## Error Response

| Field   | Type   | Description                                |
|---------|--------|--------------------------------------------|
| error   | string | Error message if the operation failed      |
| valid   | bool   | false                                      |

## Examples

### Request
```json
{
  "domain": "microsoft.com"
}
```

### Response
```json
{
  "whois": {
    "domain": "microsoft.com",
    "server": "whois.markmonitor.com",
    "created": "1991-05-02T04:00:00.000Z",
    "updated": "2023-08-18T16:15:54.000Z",
    "expires": "2025-05-03T00:00:00.000Z",
    "parsed_whois": {
      "registrar": {
        "name": "MarkMonitor Inc.",
        "abuse_contact_email": "abusecomplaints@markmonitor.com",
        "abuse_contact_phone": "+1.2086851750",
        "iana_id": "292",
        "url": "292",
        "whois_server": "whois.markmonitor.com"
      },
      "contacts": {
        "admin": {
          "name": "Domain Administrator",
          "org": "Microsoft Corporation",
          "street": ["One Microsoft Way"],
          "city": "Redmond",
          "state": "WA",
          "postal": "98052",
          "country": "US",
          "phone": "+1.4258828080",
          "fax": "+1.4259367329",
          "email": "admin@domains.microsoft"
        },
        "billing": {
          "name": "",
          "org": "",
          "street": [""],
          "city": "",
          "state": "",
          "postal": "",
          "country": "",
          "phone": "+1.2086851750",
          "fax": "",
          "email": "abusecomplaints@markmonitor.com"
        },
        "registrant": {
          "name": "Domain Administrator",
          "org": "Microsoft Corporation",
          "street": ["One Microsoft Way"],
          "city": "Redmond",
          "state": "WA",
          "postal": "98052",
          "country": "US",
          "phone": "+1.4258828080",
          "fax": "+1.4259367329",
          "email": "admin@domains.microsoft"
        },
        "tech": {
          "name": "MSN Hostmaster",
          "org": "Microsoft Corporation",
          "street": ["One Microsoft Way"],
          "city": "Redmond",
          "state": "WA",
          "postal": "98052",
          "country": "US",
          "phone": "+1.4258828080",
          "fax": "+1.4259367329",
          "email": "msnhst@microsoft.com"
        }
      },
      "name_servers": [
        "ns1-39.azure-dns.com",
        "ns2-39.azure-dns.net",
        "ns3-39.azure-dns.org",
        "ns4-39.azure-dns.info"
      ],
      "statuses": ["ACTIVE"]
    }
  },
  "valid": true
}
```

### Error Example
```json
{
  "error": "Error retrieving WHOIS data for example.invalid: Domain not found",
  "valid": false
}
```

## Notes
- This tool uses Microsoft Sentinel's domain WHOIS enrichment API
- Unlike other Sentinel APIs, this enrichment API does not require a workspace_name parameter
- The tool returns structured WHOIS data that has been parsed from the raw WHOIS response
- Some fields may be empty or missing depending on the domain's registration information
- All dates are returned in ISO 8601 format (YYYY-MM-DDThh:mm:ss.sssZ)

## Permissions Required
- Azure Resource Group Reader access or higher
- Microsoft.SecurityInsights/enrichment/read permission

## Related Tools
- sentinel_ip_geodata_get - Get geolocation data for an IP address
````

## File: resources/tool_docs/sentinel_hunting_queries_count_by_tactic.md
````markdown
# Sentinel Hunting Queries Count By Tactic Tool Documentation

## Purpose
Count Sentinel hunting queries (saved searches) by tactic.

## Parameters
| Name   | Type   | Required | Description                     |
|--------|--------|----------|---------------------------------|
| None   |        |          | This tool takes no parameters.  |

## Output Fields
| Name    | Type   | Description                                         |
|---------|--------|-----------------------------------------------------|
| valid   | bool   | True if the operation was successful                |
| error   | str    | Error message if any                                |
| results | dict   | Mapping of tactic name to count                     |
| errors  | list   | List of error messages                              |

## Example Request
```json
{
}
```

## Example Response
```json
{
  "valid": true,
  "error": null,
  "results": {
    "unknown": {
      "count": 76,
      "queries": [
        {"id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/<query-id>", "display_name": "SharePointFileOperation via devices with previously unseen user agents"},
        {"id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/<query-id>", "display_name": "Microsoft Sentinel Connectors Administrative Operations"}
      ]
    }
  },
  "errors": []
}
```

## Usage Notes
- Useful for reporting and dashboarding.

## Error Cases
- Azure API or credential errors

## See Also
- sentinel_hunting_queries_list
- sentinel_hunting_query_get
````

## File: resources/tool_docs/sentinel_hunting_queries_list.md
````markdown
# Sentinel Hunting Queries List Tool Documentation

## Purpose
List all Sentinel hunting queries (saved searches) with optional tactic/technique filtering.

## Parameters
| Name         | Type   | Required | Description                                              |
|--------------|--------|----------|----------------------------------------------------------|
| tactic       | string | No       | Filter queries by tactic (case-insensitive, optional)    |
| technique    | string | No       | Filter queries by technique (case-insensitive, optional) |

## Output Fields
| Name    | Type   | Description                                         |
|---------|--------|-----------------------------------------------------|
| valid   | bool   | True if the operation was successful                |
| error   | str    | Error message if any                                |
| results | list   | List of hunting queries (dicts)                     |
| errors  | list   | List of error messages                              |

## Example Request
```json
{
}
```

## Example Response
```json
{
  "valid": true,
  "error": null,
  "results": [
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/<query-id>",
      "name": "0dd4c9dd-5d2c-4c2d-a0e5-eafeca5d9910",
      "display_name": "SharePointFileOperation via devices with previously unseen user agents",
      "category": "Hunt Queries",
      "query": "let starttime = todatetime('{{StartTimeISO}}'); ...",
      "tags": [
        {"name": "description", "value": "Tracking via user agent is one way ..."},
        {"name": "tactics", "value": "Exfiltration"},
        {"name": "techniques", "value": "T1030"}
      ],
      "tactics": ["Exfiltration"],
      "techniques": ["T1030"],
      "description": "Tracking via user agent is one way to differentiate ...",
      "version": 2
    },
    {"id": "...", "name": "...", "display_name": "...", "category": "...", "query": "...", "tags": [], "tactics": [], "techniques": [], "description": null, "version": 2}
  ],
  "errors": []
}
```

## Usage Notes
- Filters are optional. Returns all queries if not specified.

## Error Cases
- Azure API or credential errors

## See Also
- sentinel_hunting_search
- sentinel_hunting_query_get
````

## File: resources/tool_docs/sentinel_hunting_query_get.md
````markdown
# Sentinel Hunting Query Get Tool Documentation

## Purpose
Retrieve the full details of a Sentinel hunting query (saved search) by name or ID.

## Parameters
| Name     | Type   | Required | Description                                                    |
|----------|--------|----------|----------------------------------------------------------------|
| query_id | string | No       | The full resource ID or GUID of the saved search (optional)    |
| name     | string | No       | The display name or name of the saved search (optional)        |

## Output Fields
| Name        | Type   | Description                                         |
|-------------|--------|-----------------------------------------------------|
| valid       | bool   | True if the operation was successful                |
| error       | str    | Error message if any                                |
| results     | dict   | Full hunting query details if found                 |
| errors      | list   | List of error messages                              |

## Example Request
```json
{
  "query_id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/<query-id>"
}
```

## Example Response
```json
{
  "valid": true,
  "error": null,
  "results": {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/<query-id>",
    "name": "0dd4c9dd-5d2c-4c2d-a0e5-eafeca5d9910",
    "display_name": "SharePointFileOperation via devices with previously unseen user agents",
    "category": "Hunt Queries",
    "query": "let starttime = todatetime('{{StartTimeISO}}'); ...",
    "tags": [
      {"name": "description", "value": "Tracking via user agent is one way ..."},
      {"name": "tactics", "value": "Exfiltration"},
      {"name": "techniques", "value": "T1030"}
    ],
    "tactics": ["Exfiltration"],
    "techniques": ["T1030"],
    "description": "Tracking via user agent is one way to differentiate ...",
    "version": 2
  },
  "errors": []
}
```

## Usage Notes
- At least one of `query_id` or `name` must be provided.
- Returns error if no match found.

## Error Cases
- Missing both query_id and name
- No matching query found
- Azure API or credential errors

## See Also
- sentinel_hunting_queries_list
- sentinel_hunting_search
````

## File: resources/tool_docs/sentinel_incident_details_get.md
````markdown
# sentinel_incident_get

## Purpose
Retrieves detailed information about a specific Microsoft Sentinel incident, including all available fields and calculated counts for related alerts, bookmarks, and comments. Also returns up to 5 related alerts if present.

## Parameters
| Name           | Type   | Required | Description                                                      |
|----------------|--------|----------|------------------------------------------------------------------|
| incident_number| int    | Yes      | The IncidentNumber of the Sentinel incident to retrieve.          |
| kwargs         | dict   | No       | Additional parameters (for nested invocation compatibility).      |

## Output Fields
The tool returns a dictionary with the following structure:

| Key            | Type    | Description                                                         |
|----------------|---------|---------------------------------------------------------------------|
| incident       | dict    | All columns from the `SecurityIncident` table, plus calculated fields: `AlertsCount`, `BookmarksCount`, `CommentsCount`. |
| related_alerts | list    | Up to 5 related alerts (dicts) from the `SecurityAlert` table, joined by `AlertIds`/`SystemAlertId`. |
| error          | string  | Present only if an error occurred.                                  |
| message        | string  | Present if no incident was found.                                   |

### Example `incident` fields (non-exhaustive):
- IncidentNumber
- Title
- Description
- Severity
- Status
- Classification
- ClassificationComment
- CreatedTime
- LastModifiedTime
- IncidentUrl
- ProviderName
- AlertsCount (calculated)
- BookmarksCount (calculated)
- CommentsCount (calculated)
- AlertIds (list)
- ... (all other columns from SecurityIncident)

### Example `related_alerts` fields:
- Time
- Name
- Severity
- Status
- Description
- Entities

## Example Request
```
{
  "incident_number": 3
}
```

## Example Response
```
{
  "incident": {
    "IncidentNumber": 3,
    "Title": "Suspicious Resource deployment",
    "Description": "Identifies when a rare Resource and ResourceGroup deployment occurs by a previously unseen caller.",
    "Severity": "Low",
    "Status": "New",
    "Classification": "",
    "ClassificationComment": "",
    "CreatedTime": "2025-04-17T12:34:13.422179Z",
    ...
    "AlertsCount": 1,
    "BookmarksCount": 0,
    "CommentsCount": 0,
    "AlertIds": ["40cefd90-2f07-b1ea-bcd0-ae811cbde0ed"],
    ...
  },
  "related_alerts": [
    {
      "Time": "2025-04-17T12:34:13.422179Z",
      "Name": "AlertName",
      "Severity": "High",
      "Status": "Active",
      "Description": "desc",
      "Entities": ["entity"]
    }
  ]
}
```

## Usage Notes
- Returns all available fields from the incident, including any new columns added to the schema.
- If no incident is found, returns a dict with a `message` key.
- If `AlertIds` is empty or missing, `related_alerts` will be an empty list.
- Handles both MCP server and direct invocation (using environment variables for Azure context if needed).
- All errors are returned as a dict with an `error` key.

## Error Cases
- Missing or invalid `incident_number` parameter.
- Incident not found.
- Azure authentication or query errors.

## See Also
- [sentinel_incident_list](sentinel_incident_list.md) — for listing incidents.
- [sentinel_logs_table_schema_get](sentinel_logs_table_schema_get.md) — for table schema details.
````

## File: resources/tool_docs/sentinel_ip_geodata_get.md
````markdown
# sentinel_ip_geodata_get

## Description
Get geolocation data for an IP address using Microsoft Sentinel's enrichment API.

## Parameters

| Parameter | Type   | Required | Description                     |
|-----------|--------|----------|---------------------------------|
| ip        | string | Yes      | The IP address to look up       |

## Returns

| Field   | Type   | Description                                |
|---------|--------|--------------------------------------------|
| geodata | object | Geolocation data for the specified IP address |
| valid   | bool   | Whether the operation was successful       |

### Geodata Object Fields

| Field              | Type   | Description                                       |
|--------------------|--------|---------------------------------------------------|
| ip                 | string | The IP address that was looked up                 |
| ip_addr            | string | The IP address in standard format                 |
| asn                | string | Autonomous System Number                          |
| carrier            | string | Network carrier name                              |
| city               | string | City name                                         |
| city_cf            | number | City confidence factor (0-100)                    |
| continent          | string | Continent name                                    |
| country            | string | Country name                                      |
| country_cf         | number | Country confidence factor (0-100)                 |
| ip_routing_type    | string | Routing type (e.g., "fixed")                      |
| latitude           | string | Geographic latitude                               |
| longitude          | string | Geographic longitude                              |
| organization       | string | Organization name                                 |
| organization_type  | string | Type of organization                              |
| region             | string | Geographic region                                 |
| state              | string | State or province name                            |
| state_cf           | number | State confidence factor (0-100)                   |
| state_code         | string | State or province code                            |

## Error Response

| Field   | Type   | Description                                |
|---------|--------|--------------------------------------------|
| error   | string | Error message if the operation failed      |
| valid   | bool   | false                                      |

## Examples

### Request
```json
{
  "ip": "8.8.8.8"
}
```

### Response
```json
{
  "geodata": {
    "asn": "15169",
    "carrier": "google",
    "city": "glenmont",
    "city_cf": 80,
    "continent": "north america",
    "country": "united states",
    "country_cf": 99,
    "ip_addr": "8.8.8.8",
    "ip_routing_type": "fixed",
    "latitude": "40.537",
    "longitude": "-82.12859",
    "organization": "google",
    "organization_type": "Internet Service Provider",
    "region": "great lakes",
    "state": "ohio",
    "state_cf": 95,
    "state_code": "oh",
    "ip": "8.8.8.8"
  },
  "valid": true
}
```

### Error Example
```json
{
  "error": "Error retrieving IP geodata for 8.8.8.8: Invalid IP address format",
  "valid": false
}
```

## Notes
- This tool uses Microsoft Sentinel's IP geodata enrichment API
- Unlike other Sentinel APIs, this enrichment API does not require a workspace_name parameter
- Confidence factors (CF) indicate the reliability of the location data on a scale of 0-100
- The tool will return all available geolocation data for the IP address
- Some fields may be missing if the data is not available for the specific IP address

## Permissions Required
- Azure Resource Group Reader access or higher
- Microsoft.SecurityInsights/enrichment/read permission

## Related Tools
- sentinel_domain_whois_get - Get WHOIS information for a domain
````

## File: resources/tool_docs/sentinel_logs_search_with_dummy_data.md
````markdown
# Sentinel Query With Dummy Data Tool

## Overview
The `sentinel_logs_search_with_dummy_data` tool allows security analysts to safely test Microsoft Sentinel KQL queries against mock data without accessing or modifying production data. It leverages the KQL `datatable` construct to create a temporary table from user-supplied mock records, then rebinds the original query's table reference to this mock table. The query logic remains unchanged, ensuring high-fidelity testing and validation.

---

## Parameters
| Name           | Type    | Required | Description                                                |
|----------------|---------|----------|------------------------------------------------------------|
| query          | string  | Yes      | The original KQL query to test.                            |
| mock_data_xml  | string  | No*      | XML string containing mock records (preferred format).     |
| mock_data_csv  | string  | No*      | CSV string with header row and mock records.               |
| table_name     | string  | No       | The table name to substitute in the query (default: TestTable). |

*At least one of mock_data_xml or mock_data_csv must be provided.

---

## Output Fields
| Field           | Type    | Description                                                                 |
|-----------------|---------|-----------------------------------------------------------------------------|
| valid           | bool    | Whether the query executed successfully.                                     |
| errors          | array   | List of error messages, if any.                                             |
| error           | string  | Main error message, if any.                                                 |
| original_query  | string  | The original KQL query as provided.                                         |
| table_name      | string  | The table name used in substitution.                                        |
| datatable_var   | string  | The variable name for the generated datatable.                              |
| test_query      | string  | The full KQL query executed (with datatable and let binding).               |
| result          | object  | Results from query execution (see below).                                   |

### Result Object
- `valid`: bool
- `errors`: array
- `query`: string (the full executed query)
- `result_count`: int
- `columns`: array of column descriptors
- `rows`: array of result records
- `execution_time_ms`: int
- `warnings`: array
- `message`: string

---

## Example Usage
### Example 1: Device Code Authentication Detection
**Example 1: Using XML Format (Preferred)**
```
query:
SigninLogs
| where TimeGenerated > ago(1d)
| where AuthenticationProtocol =~ "deviceCode" \
    or OriginalTransferMethod =~ "deviceCodeFlow"
| project TimeGenerated,
    UserPrincipalName,
    UserDisplayName,
    UserId,
    IPAddress,
    Location,
    AppDisplayName,
    ClientAppUsed,
    AuthenticationProtocol,
    OriginalTransferMethod,
    DeviceDetail,
    Status,
    ResourceDisplayName
| extend AlertDetails = pack(
    "UserId", UserId,
    "ClientApp", ClientAppUsed,
    "AppDisplayName", AppDisplayName,
    "Protocol", AuthenticationProtocol,
    "TransferMethod", OriginalTransferMethod,
    "DeviceInfo", DeviceDetail
)
| extend Reason = "Device Code Authentication Flow detected which may indicate unauthorized access if not used with input-constrained devices"
| extend timestamp = TimeGenerated, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress

mock_data_xml:
<rows>
  <row>
    <TimeGenerated>2025-04-22T10:15:00Z</TimeGenerated>
    <UserPrincipalName>alice@contoso.com</UserPrincipalName>
    <UserDisplayName>Alice Smith</UserDisplayName>
    <UserId>alice123</UserId>
    <IPAddress>192.168.1.1</IPAddress>
    <Location>Sydney, Australia</Location>
    <AppDisplayName>Microsoft Office</AppDisplayName>
    <ClientAppUsed>Mobile App</ClientAppUsed>
    <AuthenticationProtocol>deviceCode</AuthenticationProtocol>
    <OriginalTransferMethod></OriginalTransferMethod>
    <DeviceDetail>
      <deviceId>dev123</deviceId>
      <displayName>iPhone 15</displayName>
      <operatingSystem>iOS</operatingSystem>
      <browser>Edge</browser>
    </DeviceDetail>
    <Status>
      <errorCode>0</errorCode>
      <additionalDetails>Success</additionalDetails>
    </Status>
    <ResourceDisplayName>Microsoft Graph</ResourceDisplayName>
  </row>
  <row>
    <TimeGenerated>2025-04-22T11:30:00Z</TimeGenerated>
    <UserPrincipalName>bob@contoso.com</UserPrincipalName>
    <UserDisplayName>Bob Jones</UserDisplayName>
    <UserId>bob456</UserId>
    <IPAddress>10.0.0.5</IPAddress>
    <Location>Melbourne, Australia</Location>
    <AppDisplayName>Azure Portal</AppDisplayName>
    <ClientAppUsed>Browser</ClientAppUsed>
    <AuthenticationProtocol>oauth2</AuthenticationProtocol>
    <OriginalTransferMethod>deviceCodeFlow</OriginalTransferMethod>
    <DeviceDetail>
      <deviceId>dev456</deviceId>
      <displayName>Windows Laptop</displayName>
      <operatingSystem>Windows</operatingSystem>
      <browser>Chrome</browser>
    </DeviceDetail>
    <Status>
      <errorCode>0</errorCode>
      <additionalDetails>Success</additionalDetails>
    </Status>
    <ResourceDisplayName>Azure Portal</ResourceDisplayName>
  </row>
</rows>

table_name: SigninLogs
```

**Example 2: Using CSV Format (Alternative)**
```
query:
SecurityEvent 
| where EventID == 4624
| where AccountType == "User"
| project TimeGenerated, Computer, Account, IpAddress

mock_data_csv:
TimeGenerated,Computer,Account,AccountType,EventID,IpAddress
2025-04-22T10:15:00Z,DC01,JohnDoe,User,4624,192.168.1.100
2025-04-22T11:30:00Z,DC01,JaneDoe,User,4624,192.168.1.101
2025-04-22T12:45:00Z,DC02,AdminUser,User,4624,10.0.0.50

table_name: SecurityEvent
```

**Output**
```
{
  "valid": true,
  "errors": [],
  "error": "",
  "original_query": "SigninLogs | where TimeGenerated > ago(1d) ...",
  "table_name": "SigninLogs",
  "datatable_var": "SigninLogsDummy",
  "test_query": "let SigninLogsDummy = datatable( ... ); let SigninLogs = SigninLogsDummy; ...",
  "result": {
    "valid": true,
    "errors": [],
    "result_count": 3,
    "columns": [ ... ],
    "rows": [ ... ],
    "execution_time_ms": 3325,
    "warnings": [],
    "message": "Query executed successfully"
  }
}
```

---

## Usage Notes
- Supports two data input formats:
  - **XML Format (preferred)**: Better for complex data with nested structures
  - **CSV Format**: Simpler option for flat tabular data
- The tool automatically infers the correct KQL types for each column, including `datetime` for ISO8601 strings.
- Handles nested structures in XML (converted to dynamic objects in KQL)
- The original query logic is preserved; only the data source is swapped for the mock datatable.
- No production or sensitive data is accessed or modified.
- Useful for detection rule development, debugging, documentation, and training.

---

## Error Cases
- If no mock data is provided in either XML or CSV format, the tool will return a helpful error with examples.
- If the XML or CSV data cannot be parsed, specific parsing errors will be returned.
- If the mock data is missing required columns referenced in the query, appropriate errors will be provided.
- KQL syntax errors in the original query will be reported.
- Any query execution errors are surfaced in the `errors` and `error` fields.

---

## References
- [KQL datatable documentation](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/datatableoperator)
- [Microsoft Sentinel KQL documentation](https://learn.microsoft.com/en-us/azure/sentinel/)

---

## Security and Privacy
- No workspace or environment-specific details are included in the documentation or output.
- All testing is performed in-memory and does not affect production data or configuration.

---
````

## File: resources/tool_docs/sentinel_logs_search.md
````markdown
# Sentinel Logs Search Tool Documentation

## Purpose
Runs a KQL query against Azure Monitor Logs (Log Analytics workspace) and returns structured results. Supports both MCP server and direct invocation for integration testing.

---

## Parameters
| Name        | Type   | Required | Description                                                         |
|-------------|--------|----------|---------------------------------------------------------------------|
| query       | string | Yes      | The Kusto Query Language (KQL) query to run.                        |
| timespan    | string | No       | Time window for the query (e.g., '1d', '12h', '30m'). Default: '1d' |

---

## Output Fields
| Name               | Type     | Description                                                                                 |
|--------------------|----------|---------------------------------------------------------------------------------------------|
| valid              | bool     | True if the query ran successfully, False otherwise.                                         |
| errors             | list     | List of error messages (empty if none).                                                      |
| error              | string   | Single error message (empty if none).                                                        |
| query              | string   | The KQL query that was executed.                                                             |
| timespan           | string   | The timespan used for the query.                                                             |
| result_count       | int      | Number of rows returned.                                                                     |
| columns            | list     | List of dicts describing columns: name, type, ordinal.                                       |
| rows               | list     | List of result rows (each is a dict mapping column name to value).                           |
| execution_time_ms  | int      | Query execution time in milliseconds.                                                        |
| warnings           | list     | List of warning messages (e.g., for large result sets).                                      |
| message            | string   | Human-readable status message.                                                                |

---

## Example Request
```
{
  "query": "Heartbeat | take 5"
}
```

---

## Example Response
```
{
  "valid": true,
  "errors": [],
  "query": "Heartbeat | take 5",
  "timespan": "1d",
  "result_count": 0,
  "columns": [
    {"name": "TenantId", "type": "string", "ordinal": 0},
    {"name": "SourceSystem", "type": "string", "ordinal": 1},
    {"name": "TimeGenerated", "type": "string", "ordinal": 2},
    ...
  ],
  "rows": [],
  "execution_time_ms": 1099,
  "warnings": [],
  "message": "Query executed successfully"
}
```

---

## Usage Notes
- The tool supports any valid KQL query against the configured Log Analytics workspace.
- If no results are returned, `rows` will be an empty list but `columns` will describe the expected schema.
- If the query requests a large result set (e.g., `take 10000`), a warning will be included in `warnings`.
- Timespan defaults to '1d' if not specified.

---

## Error Cases
| Error Message                                              | When it Occurs                                                    |
|-----------------------------------------------------------|-------------------------------------------------------------------|
| Missing required parameter: query                         | The `query` parameter was not provided.                           |
| Azure Monitor Logs client or workspace_id is not initialized. Check your credentials and configuration. | Azure credentials or workspace info missing or invalid.           |
| Query timed out after 60 seconds                          | The query did not complete within the timeout window.              |
| Error executing query: <details>                          | Any other unexpected error during query execution.                 |

---

## See Also
- [sentinel_query_validate.md](sentinel_query_validate.md)
- [Azure Monitor KQL documentation](https://docs.microsoft.com/azure/azure-monitor/logs/query-language)

---

*This documentation uses only fictional or placeholder values and never exposes real workspace or credential details.*
````

## File: resources/tool_docs/sentinel_logs_table_details_get.md
````markdown
# Tool: sentinel_logs_table_details_get

## Purpose
Get details (metadata, retention, row count, etc.) for a Log Analytics table.

## Parameters
| Name       | Type | Required | Description                                 |
|------------|------|----------|---------------------------------------------|
| table_name | str  | Yes      | Name of the table to retrieve details for.  |

## Output Fields
| Name                     | Type   | Description                                |
|--------------------------|--------|--------------------------------------------|
| table                    | str    | Name of the table.                         |
| lastUpdated              | str    | ISO timestamp of last data update.         |
| rowCount                 | int    | Number of rows in the table.               |
| retentionInDays          | int    | Hot retention period (days).               |
| archiveRetentionInDays   | int    | Archive retention period (days), if present|
| totalRetentionInDays     | int    | Total retention period (days).             |
| plan                     | str    | Table plan (if available).                 |
| provisioningState        | str    | Provisioning state (if available).         |
| restoredLogs             | any    | Restored logs information (if available).  |
| tableSubType             | str    | Table subtype (if available).              |
| tableType                | str    | Table type (if available).                 |
| systemData               | any    | System data (if available).                |
| description              | str    | Table description (if available).          |
| isInherited              | bool   | If retention is inherited.                 |
| isTotalRetentionInherited| bool   | If total retention is inherited.           |
| errors                   | list   | List of error messages (if any).           |
| error                    | str    | Error message (optional, present if error occurred)|

## Example Request
```json
{
  "table_name": "SignInLogs"
}
```

## Example Response

### Typical Response (with available metadata)
```json
{
  "table": "AzureActivity",
  "lastUpdated": "2025-04-25T03:00:46.511607Z",
  "rowCount": 871,
  "retentionInDays": 90,
  "totalRetentionInDays": null,
  "archiveRetentionInDays": null,
  "plan": null,
  "provisioningState": null,
  "tableType": null,
  "description": null,
  "isInherited": null,
  "isTotalRetentionInherited": null
}
```

### Response with Errors
```json
{
  "table": "NonExistentTable",
  "retentionInDays": null,
  "totalRetentionInDays": null,
  "archiveRetentionInDays": null,
  "plan": null,
  "provisioningState": null,
  "tableType": null,
  "description": null,
  "isInherited": null,
  "isTotalRetentionInherited": null,
  "lastUpdated": null,
  "rowCount": 0,
  "errors": ["REST API: No data returned for table metadata.", "KQL error (lastUpdated): Table not found"]
}
```

## Usage Notes
- Combines KQL and REST API metadata for completeness.
- Returns all fields even if some are None.
- Uses direct REST API calls with API version 2017-04-26-preview for metadata retrieval.
- Retention information (retentionInDays) is typically available for most tables.
- Some metadata fields may be null depending on the table type and Azure environment configuration.

## Error Cases
| Error Message                                        | Cause                                       |
|----------------------------------------------------|---------------------------------------------|
| Missing required parameter: table_name               | Table name parameter is missing             |
| REST API: Missing required parameters...            | Missing Azure resource configuration        |
| REST API: No data returned for table metadata.      | API returned no data for the specified table|
| REST API: No properties found in table metadata...  | API response missing properties field       |
| REST API call error: ...                            | Error during REST API call                  |
| KQL error (lastUpdated): ...                        | Error querying for last updated timestamp   |
| KQL error (rowCount): ...                           | Error querying for row count                |
| KQL timeout: ...                                    | KQL query exceeded time limit               |

## See Also
- [sentinel_logs_tables_list.md](sentinel_logs_tables_list.md)
- [sentinel_logs_table_schema_get.md](sentinel_logs_table_schema_get.md)
````

## File: resources/tool_docs/sentinel_logs_table_schema_get.md
````markdown
# Tool: sentinel_logs_table_schema_get

## Purpose
Get schema (columns/types) for a Log Analytics table.

## Parameters
| Name      | Type | Required | Description                                   |
|-----------|------|----------|-----------------------------------------------|
| table     | str  | Yes      | Name of the table to retrieve schema for.     |

## Output Fields
| Name   | Type | Description                                        |
|--------|------|----------------------------------------------------|
| table  | str  | Name of the table.                                 |
| schema | list | List of columns with keys: name (str), type (str)  |
| error  | str  | Error message (optional, present if error occurred)|

## Example Request
```json
{
  "table": "SignInLogs"
}
```

## Example Response
```json
{
  "table": "SignInLogs",
  "schema": [
    { "name": "TimeGenerated", "type": "datetime" },
    { "name": "UserPrincipalName", "type": "string" },
    { "name": "AppDisplayName", "type": "string" },
    { "name": "IPAddress", "type": "string" },
    { "name": "ResultType", "type": "int" }
  ]
}
```

## Usage Notes
- Returns all columns and their types for the specified table.
- Uses KQL to fetch schema.

## Error Cases
| Error Message                    | Cause                        |
|----------------------------------|------------------------------|
| Table name is required.          | Missing required parameter   |
| KQL error: ...                   | KQL query failed             |
| REST API client error: ...       | REST API call failed         |

## See Also
- [sentinel_logs_tables_list.md](sentinel_logs_tables_list.md)
- [sentinel_logs_table_details_get.md](sentinel_logs_table_details_get.md)
````

## File: resources/tool_docs/sentinel_logs_tables_list.md
````markdown
# Tool: sentinel_logs_tables_list

## Purpose
List available tables in the Log Analytics workspace.

## Parameters
| Name           | Type   | Required | Description                                                    |
|----------------|--------|----------|----------------------------------------------------------------|
| filter_pattern | str    | No       | Pattern to filter table names (case-insensitive substring).    |

## Output Fields
| Name         | Type   | Description                                                      |
|--------------|--------|------------------------------------------------------------------|
| found        | int    | Number of tables found.                                          |
| tables       | list   | List of tables with keys: name (str), lastUpdated (str), rowCount (int) |
| error        | str    | Error message (optional, present if an error occurred).           |

## Example Request
```json
{
  "filter_pattern": "SignIn"
}
```

## Example Response
```json
{
  "found": 2,
  "tables": [
    { "name": "SignInLogs", "lastUpdated": "2025-04-22T14:53:00Z", "rowCount": 485120 },
    { "name": "SignInSummary", "lastUpdated": "2025-04-22T14:50:00Z", "rowCount": 12480 }
  ]
}
```

## Usage Notes
- Returns all tables if `filter_pattern` is not provided.
- Uses KQL and REST API for comprehensive table info.
- Caches results for performance.

## Error Cases
| Error Message                                               | Cause                                      |
|------------------------------------------------------------|--------------------------------------------|
| Azure Logs client is not initialized. Check your credentials and configuration. | Credentials or config missing/invalid       |
| No tables found.                                           | No tables exist or filter excludes all      |
| KQL error: ...                                             | KQL query failed                           |
| REST API client error: ...                                 | REST API call failed                       |

## See Also
- [sentinel_logs_table_schema_get.md](sentinel_logs_table_schema_get.md)
- [sentinel_logs_table_details_get.md](sentinel_logs_table_details_get.md)
````

## File: resources/tool_docs/sentinel_metadata_get.md
````markdown
# sentinel_metadata_get

**Description:**
Get details for specific Sentinel metadata by ID.

**Parameters:**
- `metadata_id` (str, required): The ID or short name of the metadata object to retrieve (can be either the full ARM resource ID or just the short name, e.g., `analyticsrule-<guid>`).

**Output:**
```json
{
  "metadata": {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/metadata/analyticsrule-<guid>",
    "name": "analyticsrule-<guid>",
    "kind": "AnalyticsRule",
    "content_id": "<content-id>",
    "version": "2.0.4",
    "parent_id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/alertRules/<guid>",
    "author": {
      "name": "Microsoft",
      "email": "support@microsoft.com"
    },
    "source": {
      "kind": "Solution",
      "name": "Microsoft 365",
      "source_id": "azuresentinel.azure-sentinel-solution-office365"
    },
    "support": {
      "tier": "Microsoft",
      "name": "Microsoft Corporation",
      "email": "support@microsoft.com",
      "link": "https://support.microsoft.com/"
    },
    "categories": null,
    "dependencies": null,
    "created": "",
    "last_modified": ""
  },
  "valid": true,
  "errors": []
}
```

**Error Handling:**
If the metadata ID is invalid or not found, the output will look like:
```json
{
  "metadata": {},
  "valid": false,
  "errors": ["Error retrieving metadata: Operation returned an invalid status 'Not Found'"],
  "error": "Error retrieving metadata: Operation returned an invalid status 'Not Found'"
}
```


**Error Handling:**
If the ID is invalid or any error occurs, the output includes an `error` key and a descriptive message. The `errors` list will contain error messages, if any.

**Azure Context Fallback:**
Supports both MCP server and direct invocation. Falls back to environment variables if MCP context is unavailable.

**Example Usage:**
Request with short name:
```json
{
  "tool": "sentinel_metadata_get",
  "kwargs": {"metadata_id": "analyticsrule-<guid>"}
}
```
Request with full ARM resource ID:
```json
{
  "tool": "sentinel_metadata_get",
  "kwargs": {"metadata_id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/metadata/analyticsrule-<guid>"}
}
```

**Example Response:**
```json
{
  "metadata": {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/metadata/analyticsrule-<guid>",
    "name": "analyticsrule-<guid>",
    "kind": "AnalyticsRule",
    "content_id": "<content-id>",
    "version": "2.0.4",
    "parent_id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/alertRules/<guid>",
    "author": {
      "name": "Microsoft",
      "email": "support@microsoft.com"
    },
    "source": {
      "kind": "Solution",
      "name": "Microsoft 365",
      "source_id": "azuresentinel.azure-sentinel-solution-office365"
    },
    "support": {
      "tier": "Microsoft",
      "name": "Microsoft Corporation",
      "email": "support@microsoft.com",
      "link": "https://support.microsoft.com/"
    },
    "categories": null,
    "dependencies": null,
    "created": "",
    "last_modified": ""
  },
  "valid": true,
  "errors": []
}
```

**Example Error Response:**
```json
{
  "metadata": {},
  "valid": false,
  "errors": ["Error retrieving metadata: Operation returned an invalid status 'Not Found'"],
  "error": "Error retrieving metadata: Operation returned an invalid status 'Not Found'"
}
```
````

## File: resources/tool_docs/sentinel_metadata_list.md
````markdown
# sentinel_metadata_list

**Description:**
List all Sentinel metadata in the current workspace.

**Parameters:**
_None required. Context is extracted from MCP server or environment variables._

**Output:**
```
{
  "metadata": [
    {
      "id": "<metadata-id>",
      "name": "<metadata-name>",
      "kind": "<kind>",
      "content_id": "<content-id>",
      "version": "<version>",
      "parent_id": "<parent-id>",
      "author": { /* author object */ },
      "source": { /* source object */ },
      "support": { /* support object */ },
      "categories": null,
      "dependencies": null,
      "created": "<timestamp>",
      "last_modified": "<timestamp>"
      // ...additional fields depending on Azure API
    }
  ],
  "valid": true,
  "errors": [],
  "error": "<error-message-if-any>"
}
```

**Error Handling:**
If any error occurs, the output includes an `error` key and a descriptive message. The `errors` list will contain error messages, if any.

**Azure Context Fallback:**
Supports both MCP server and direct invocation. Falls back to environment variables if MCP context is unavailable.

**Example Usage:**
```json
{
  "tool": "sentinel_metadata_list",
  "kwargs": {}
}
```

**Example Response:**
```json
{
  "metadata": [
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/metadata/analyticsrule-<guid>",
      "name": "analyticsrule-<guid>",
      "kind": "AnalyticsRule",
      "content_id": "<content-id>",
      "version": "2.0.4",
      "parent_id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/alertRules/<guid>",
      "author": "<author-object>",
      "source": "<source-object>",
      "support": "<support-object>",
      "categories": null,
      "dependencies": null,
      "created": "",
      "last_modified": ""
    },
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/metadata/huntingquery-<guid>",
      "name": "huntingquery-<guid>",
      "kind": "HuntingQuery",
      "content_id": "<content-id>",
      "version": "2.0.1",
      "parent_id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/savedSearches/<guid>",
      "author": "<author-object>",
      "source": "<source-object>",
      "support": "<support-object>",
      "categories": null,
      "dependencies": null,
      "created": "",
      "last_modified": ""
    }
    // ...more metadata items
  ],
  "valid": true,
  "errors": [],
  "error": null
}
```
{
  "tool": "sentinel_metadata_list",
  "kwargs": {}
}
```
````

## File: resources/tool_docs/sentinel_ml_analytics_setting_get.md
````markdown
# sentinel_ml_analytics_setting_get

**Description:**
Get a specific Sentinel ML analytics setting by name.

**Parameters:**
- `setting_name` (str, required): The name of the ML analytics setting to retrieve.

**Output:**
```
{
  "setting": {
    "id": "<setting-id>",
    "name": "<setting-name>",
    "kind": "<kind>",
    "etag": "<etag>",
    "type": "<type>",
    "description": "<description>",
    "display_name": "<display-name>",
    "enabled": true|false,
    "last_modified_utc": "<timestamp>",
    "required_data_connectors": [<connector-list>],
    "tactics": [<tactics-list>],
    "techniques": [<techniques-list>],
    "anomaly_version": "<version>",
    "customizable_observations": [<observation-list>],
    "frequency": "<frequency>",
    "settings_status": "<status>",
    "is_default_settings": true|false,
    "anomaly_settings_version": "<version>",
    "settings_definition_id": "<definition-id>",
    "properties": { /* properties object */ },
    "referenced_by_analytic_rules": [
      {
        "rule_name": "<rule-name>",
        "rule_id": "<rule-id>",
        "rule_kind": "<rule-kind>"
      }
    ]
  },
  "valid": true|false,
  "errors": [<error-messages>],
  "error": "<error-message-if-any>"
}
```

**Error Handling:**
If the name is invalid or any error occurs, the output includes an `error` key and a descriptive message. The `errors` list will contain error messages, if any.

**Azure Context Fallback:**
Supports both MCP server and direct invocation. Falls back to environment variables if MCP context is unavailable.

**Example Usage:**
```json
{
  "tool": "sentinel_ml_analytics_setting_get",
  "kwargs": {"setting_name": "<setting-name>"}
}
```

**Example Response (invalid name):**
```json
{
  "setting": {},
  "valid": false,
  "errors": [
    "Error retrieving ML analytics setting: 'in <string>' requires string as left operand, not NoneType"
  ],
  "error": "Error retrieving ML analytics setting: 'in <string>' requires string as left operand, not NoneType"
}
```
{
  "tool": "sentinel_ml_analytics_setting_get",
  "kwargs": {"setting_name": "<setting-name>"}
}
```
````

## File: resources/tool_docs/sentinel_ml_analytics_settings_list.md
````markdown
# sentinel_ml_analytics_settings_list

**Description:**
List all Sentinel ML analytics settings in the current workspace.

**Parameters:**
_None required. Context is extracted from MCP server or environment variables._

**Output:**
```
{
  "settings": [
    {
      "id": "<setting-id>",
      "name": "<setting-name>",
      "description": "<description>",
      "enabled": true|false
      // ...additional fields depending on Azure API
    }
  ],
  "valid": true,
  "errors": [],
  "error": "<error-message-if-any>"
}
```

**Error Handling:**
If any error occurs, the output includes an `error` key and a descriptive message. The `errors` list will contain error messages, if any.

**Azure Context Fallback:**
Supports both MCP server and direct invocation. Falls back to environment variables if MCP context is unavailable.

**Example Usage:**
```json
{
  "tool": "sentinel_ml_analytics_settings_list",
  "kwargs": {}
}
```

**Example Response:**
```json
{
  "settings": [
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/<setting-guid>",
      "name": "b40a7a5b-5d39-46fe-a79e-2acdb38e1ce7",
      "description": "This algorithm detects an unusually high volume of AWS cloud trail log console failed login events per group user account within the last day. The model is trained on the previous 21 days of AWS cloud trail log events on group user account basis. This activity may indicate that the account is compromised.",
      "enabled": true
    },
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/securityMLAnalyticsSettings/<setting-guid>",
      "name": "29094df8-e0c7-4475-a74c-bda74a07affb",
      "description": "This algorithm detects an unusually high volume of successful logins per user account by different logon types. The model is trained on the previous 21 days of security event ID 4624 on an account. It indicates anomalous high volume of successful logins in the last day.",
      "enabled": true
    }
    // ...more settings
  ],
  "valid": true,
  "errors": [],
  "error": null
}
```
{
  "tool": "sentinel_ml_analytics_settings_list",
  "kwargs": {}
}
```
````

## File: resources/tool_docs/sentinel_query_validate.md
````markdown
# Tool: sentinel_query_validate (KQLValidateTool)

## Purpose
Validates the syntax of a provided KQL (Kusto Query Language) query string locally, without executing it against a workspace. This tool is used to check for KQL syntax errors before attempting to run a query in Microsoft Sentinel or Log Analytics.

## Parameters
| Name       | Type   | Required | Description                                                      |
|------------|--------|----------|------------------------------------------------------------------|
| query      | string | Yes      | The KQL query string to validate.                                |

- The parameter can be provided directly as `query` or nested within a `kwargs` dictionary for compatibility with various invocation patterns.

## Output Fields
| Name    | Type    | Description                                                                 |
|---------|---------|-----------------------------------------------------------------------------|
| valid   | bool    | True if the KQL syntax is valid; False otherwise.                            |
| errors  | list    | List of error messages if validation fails; empty if valid.                   |
| result  | string  | Success message if valid, omitted if invalid.                                |
| error   | string  | Error message if validation fails or if a required parameter is missing.      |

## Example Requests and Responses

### 1. Simple Filter Query
**Request:**
```json
{
  "query": "SecurityEvent | where EventID == 4625"
}
```
**Response:**
```json
{
  "result": "Query validation passed. The KQL syntax appears to be correct.",
  "valid": true,
  "errors": []
}
```

### 2. Aggregation by Account and Hour
**Request:**
```json
{
  "query": "SecurityEvent | where EventID = 4625 | summarize Count=count() by Account, bin(TimeGenerated, 1h)"
}
```
**Response:**
```json
{
  "result": "Query validation passed. The KQL syntax appears to be correct.",
  "valid": true,
  "errors": []
}
```

### 3. Multi-step Aggregation and Projection
**Request:**
```json
{
  "query": "SecurityEvent | summarize Count=count() by Account, bin(TimeGenerated, 1h) | where Count > 10 | project Account, Count, TimeGenerated"
}
```
**Response:**
```json
{
  "result": "Query validation passed. The KQL syntax appears to be correct.",
  "valid": true,
  "errors": []
}
```

### 4. Query with Syntax Error (Missing Parenthesis)
**Request:**
```json
{
  "query": "SecurityEvent | where EventID = 4625 | summarize Count=count() by Account, bin(TimeGenerated, 1h | project Account, Count, TimeGenerated"
}
```
**Response:**
```json
{
  "error": "KQL validation failed:
Unknown position: Expected: )",
  "valid": false,
  "errors": ["Unknown position: Expected: )"]
}
```

## Usage Notes
- This tool does not execute the query or check for schema correctness; it only validates KQL syntax.
- If the required parameter `query` is missing, the tool returns an error and sets `valid` to false.
- Supports both MCP server and direct invocation (integration tests).
- The tool leverages the local `utilities.kql_validator.validate_kql` function for validation logic.

## Error Cases
| Error Condition                | Error Message                                         |
|-------------------------------|------------------------------------------------------|
| Missing query                  | "Missing required parameter: query"                  |
| KQL validation unavailable     | "KQL validation unavailable" (from validator errors) |
| General exception              | "An error occurred while validating the query..."    |

## See Also

- [sentinel_logs_search](sentinel_logs_table_get.md): Executes KQL queries against Log Analytics tables.

---

_This documentation follows the MCP tool documentation template as required by project architecture guidelines._
````

## File: resources/tool_docs/sentinel_source_control_get.md
````markdown
# sentinel_source_control_get

**Description:**
Get details for a specific Sentinel source control by ID.

**Parameters:**
- `source_control_id` (str, required): The ID of the source control to retrieve.

**Output:**
```
{
  "source_control": {
    "id": "<source-control-id>",
    "name": "<source-control-name>",
    "description": "<description>"
    // ...additional fields depending on Azure API
  },
  "valid": true|false,
  "errors": [<error-messages>],
  "error": "<error-message-if-any>"
}
```

**Error Handling:**
If the ID is invalid or any error occurs, the output includes an `error` key and a descriptive message. The `errors` list will contain error messages, if any.

**Azure Context Fallback:**
Supports both MCP server and direct invocation. Falls back to environment variables if MCP context is unavailable.

**Example Usage:**
```json
{
  "tool": "sentinel_source_control_get",
  "kwargs": {"source_control_id": "<source-control-id>"}
}
```

**Example Response (invalid ID):**
```json
{
  "source_control": {},
  "valid": false,
  "errors": [
    "Error retrieving source control: (BadRequest) The value '<source-control-id>' is not valid.
Code: BadRequest
Message: The value '<source-control-id>' is not valid."
  ],
  "error": "Error retrieving source control: (BadRequest) The value '<source-control-id>' is not valid.
Code: BadRequest
Message: The value '<source-control-id>' is not valid."
}
```
{
  "tool": "sentinel_source_control_get",
  "kwargs": {"source_control_id": "<source-control-id>"}
}
```
````

## File: resources/tool_docs/sentinel_source_controls_list.md
````markdown
# sentinel_source_controls_list

**Description:**
List all Sentinel source controls in the current workspace.

**Parameters:**
_None required. Context is extracted from MCP server or environment variables._

**Output:**
```
{
  "source_controls": [
    {
      "id": "<source-control-id>",
      "name": "<source-control-name>",
      "description": "<description>"
      // ...additional fields depending on Azure API
    }
  ],
  "valid": true,
  "errors": [],
  "error": "<error-message-if-any>"
}
```

**Error Handling:**
If any error occurs, the output includes an `error` key and a descriptive message. The `errors` list will contain error messages, if any.

**Azure Context Fallback:**
Supports both MCP server and direct invocation. Falls back to environment variables if MCP context is unavailable.

**Example Usage:**
```json
{
  "tool": "sentinel_source_controls_list",
  "kwargs": {}
}
```

**Example Response:**
```json
{
  "source_controls": [],
  "valid": true,
  "errors": [],
  "error": null
}
```
{
  "tool": "sentinel_source_controls_list",
  "kwargs": {}
}
```
````

## File: resources/tool_docs/sentinel_watchlist_get.md
````markdown
# sentinel_watchlist_get

## Purpose
Retrieves detailed information about a specific Microsoft Sentinel watchlist by its alias. Provides comprehensive metadata about the watchlist including its properties, creation time, and item count.

## Parameters
| Name           | Type   | Required | Description                                                      |
|----------------|--------|----------|------------------------------------------------------------------|
| watchlist_alias| string | Yes      | The alias of the Sentinel watchlist to retrieve.                 |
| kwargs         | dict   | No       | Additional parameters (for nested invocation compatibility).      |

## Output Fields
The tool returns a dictionary with the following structure:

| Key       | Type    | Description                                          |
|-----------|---------|------------------------------------------------------|
| watchlist | dict    | Detailed information about the requested watchlist.  |
| valid     | boolean | Indicates if the operation completed successfully.   |
| error     | string  | Present only if an error occurred.                   |

### Example `watchlist` fields:
- id: Full Azure resource ID of the watchlist
- name: Name of the watchlist
- alias: Alias used to reference the watchlist
- displayName: User-friendly display name of the watchlist
- description: Description of the watchlist's purpose
- provider: Provider of the watchlist (e.g., "Microsoft")
- source: Source of the watchlist data (e.g., "Local file")
- itemsSearchKey: Primary key column for the watchlist items
- created: Creation timestamp
- updated: Last update timestamp
- itemsCount: Number of items in the watchlist

## Example Request
```
{
  "watchlist_alias": "hva"
}
```

## Example Response
```
{
  "watchlist": {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/Watchlists/hva",
    "name": "hva",
    "alias": "hva",
    "displayName": "High Value Assets",
    "description": "List of high value assets in the organization",
    "provider": "Microsoft",
    "source": "Local file",
    "itemsSearchKey": "Hostname",
    "created": "2025-04-20T08:15:30.422179Z",
    "updated": "2025-04-20T08:15:30.422179Z",
    "itemsCount": 10
  },
  "valid": true
}
```

## Usage Notes
- Returns detailed information about a specific watchlist identified by its alias.
- The watchlist_alias is case-sensitive and must exactly match the alias in Sentinel.
- Handles both MCP server and direct invocation (using environment variables for Azure context if needed).
- All errors are returned as a dict with an `error` key.

## Error Cases
- Missing or invalid `watchlist_alias` parameter.
- Watchlist not found with the specified alias.
- Azure SecurityInsights client initialization failure.
- Azure authentication errors.
- Insufficient permissions to access the watchlist.
- Network or service connectivity issues.

## See Also
- [sentinel_watchlists_list](sentinel_watchlists_list.md) — for listing all watchlists.
- [sentinel_watchlist_items_list](sentinel_watchlist_items_list.md) — for listing items in a watchlist.
````

## File: resources/tool_docs/sentinel_watchlist_item_get.md
````markdown
# sentinel_watchlist_item_get

## Purpose
Retrieves detailed information about a specific item in a Microsoft Sentinel watchlist. This tool allows you to get the complete data for an individual watchlist item identified by both the watchlist alias and the item's unique identifier.

## Parameters
| Name             | Type   | Required | Description                                                      |
|------------------|--------|----------|------------------------------------------------------------------|
| watchlist_alias  | string | Yes      | The alias of the Sentinel watchlist containing the item.         |
| watchlist_item_id| string | Yes      | The unique identifier of the watchlist item to retrieve.         |
| kwargs           | dict   | No       | Additional parameters (for nested invocation compatibility).      |

## Output Fields
The tool returns a dictionary with the following structure:

| Key           | Type    | Description                                          |
|---------------|---------|------------------------------------------------------|
| watchlistItem | dict    | Detailed information about the requested item.       |
| valid         | boolean | Indicates if the operation completed successfully.   |
| error         | string  | Present only if an error occurred.                   |

### Example `watchlistItem` fields:
- id: Full Azure resource ID of the watchlist item
- name: Unique identifier of the watchlist item
- itemsKeyValue: Value of the primary key for this item
- properties: Key-value pairs containing the actual data of the watchlist item
- watchlistAlias: The alias of the watchlist the item belongs to

## Example Request
```
{
  "watchlist_alias": "hva",
  "watchlist_item_id": "d3e30fa7-8909-409e-87f8-d087731da067"
}
```

## Example Response
```
{
  "watchlistItem": {
    "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/Watchlists/hva/WatchlistItems/d3e30fa7-8909-409e-87f8-d087731da067",
    "name": "d3e30fa7-8909-409e-87f8-d087731da067",
    "itemsKeyValue": "server001",
    "properties": {
      "Hostname": "server001",
      "IPAddress": "10.0.0.1",
      "Owner": "IT Department",
      "Classification": "Critical"
    },
    "watchlistAlias": "hva"
  },
  "valid": true
}
```

## Usage Notes
- Returns detailed information about a specific watchlist item identified by its ID.
- Both the watchlist_alias and watchlist_item_id are case-sensitive and must exactly match the values in Sentinel.
- The properties field contains the actual data of the watchlist item as key-value pairs.
- Handles both MCP server and direct invocation (using environment variables for Azure context if needed).
- All errors are returned as a dict with an `error` key.

## Error Cases
- Missing or invalid `watchlist_alias` parameter.
- Missing or invalid `watchlist_item_id` parameter.
- Watchlist not found with the specified alias.
- Watchlist item not found with the specified ID.
- Azure SecurityInsights client initialization failure.
- Azure authentication errors.
- Insufficient permissions to access the watchlist item.
- Network or service connectivity issues.

## See Also
- [sentinel_watchlists_list](sentinel_watchlists_list.md) — for listing all watchlists.
- [sentinel_watchlist_get](sentinel_watchlist_get.md) — for retrieving a specific watchlist.
- [sentinel_watchlist_items_list](sentinel_watchlist_items_list.md) — for listing all items in a watchlist.
````

## File: resources/tool_docs/sentinel_watchlist_items_list.md
````markdown
# sentinel_watchlist_items_list

## Purpose
Lists all items in a specific Microsoft Sentinel watchlist identified by its alias. Watchlist items are individual records stored in a watchlist that can be used for lookups and enrichment in Sentinel queries, analytics rules, and hunting.

## Parameters
| Name           | Type   | Required | Description                                                      |
|----------------|--------|----------|------------------------------------------------------------------|
| watchlist_alias| string | Yes      | The alias of the Sentinel watchlist to retrieve items from.      |
| kwargs         | dict   | No       | Additional parameters (for nested invocation compatibility).      |

## Output Fields
The tool returns a dictionary with the following structure:

| Key           | Type    | Description                                          |
|---------------|---------|------------------------------------------------------|
| watchlistItems| list    | List of watchlist item objects with their data.      |
| count         | integer | The number of watchlist items returned.              |
| watchlistAlias| string  | The alias of the watchlist the items belong to.      |
| valid         | boolean | Indicates if the operation completed successfully.   |
| error         | string  | Present only if an error occurred.                   |

### Example `watchlistItems` fields:
- id: Full Azure resource ID of the watchlist item
- name: Unique identifier of the watchlist item
- itemsKeyValue: Value of the primary key for this item
- properties: Key-value pairs containing the actual data of the watchlist item

## Example Request
```
{
  "watchlist_alias": "hva"
}
```

## Example Response
```
{
  "watchlistItems": [
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/Watchlists/hva/WatchlistItems/<item-id>",
      "name": "<item-id>",
      "itemsKeyValue": "server001",
      "properties": {
        "Hostname": "server001",
        "IPAddress": "10.0.0.1",
        "Owner": "IT Department",
        "Classification": "Critical"
      }
    },
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/Watchlists/hva/WatchlistItems/<item-id>",
      "name": "<item-id>",
      "itemsKeyValue": "server002",
      "properties": {
        "Hostname": "server002",
        "IPAddress": "10.0.0.2",
        "Owner": "Finance Department",
        "Classification": "High"
      }
    }
  ],
  "count": 2,
  "watchlistAlias": "hva",
  "valid": true
}
```

## Usage Notes
- Returns all items in a specific watchlist identified by its alias.
- The watchlist_alias is case-sensitive and must exactly match the alias in Sentinel.
- The properties field contains the actual data of the watchlist item as key-value pairs.
- If no items exist in the watchlist, returns an empty list with count 0.
- Handles both MCP server and direct invocation (using environment variables for Azure context if needed).
- All errors are returned as a dict with an `error` key.

## Error Cases
- Missing or invalid `watchlist_alias` parameter.
- Watchlist not found with the specified alias.
- Azure SecurityInsights client initialization failure.
- Azure authentication errors.
- Insufficient permissions to access the watchlist items.
- Network or service connectivity issues.

## See Also
- [sentinel_watchlists_list](sentinel_watchlists_list.md) — for listing all watchlists.
- [sentinel_watchlist_get](sentinel_watchlist_get.md) — for retrieving a specific watchlist.
- [sentinel_watchlist_item_get](sentinel_watchlist_item_get.md) — for retrieving a specific watchlist item.
````

## File: resources/tool_docs/sentinel_watchlists_list.md
````markdown
# sentinel_watchlists_list

## Purpose
Lists all Microsoft Sentinel watchlists in the current workspace. Watchlists are user-created tables that can be used to store data for lookups and enrichment in Sentinel queries, analytics rules, and hunting.

## Parameters
| Name   | Type | Required | Description                                                 |
|--------|------|----------|-------------------------------------------------------------|
| kwargs | dict | No       | Additional parameters (for nested invocation compatibility). |

## Output Fields
The tool returns a dictionary with the following structure:

| Key       | Type    | Description                                          |
|-----------|---------|------------------------------------------------------|
| watchlists| list    | List of watchlist objects with their metadata.       |
| count     | integer | The number of watchlists returned.                   |
| valid     | boolean | Indicates if the operation completed successfully.   |
| error     | string  | Present only if an error occurred.                   |

### Example `watchlists` fields:
- id: Full Azure resource ID of the watchlist
- name: Name of the watchlist
- alias: Alias used to reference the watchlist
- displayName: User-friendly display name of the watchlist
- description: Description of the watchlist's purpose
- provider: Provider of the watchlist (e.g., "Microsoft")
- source: Source of the watchlist data (e.g., "Local file")
- itemsSearchKey: Primary key column for the watchlist items
- created: Creation timestamp
- updated: Last update timestamp
- itemsCount: Number of items in the watchlist

## Example Request
```
{}
```

## Example Response
```
{
  "watchlists": [
    {
      "id": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.OperationalInsights/workspaces/<workspace-name>/providers/Microsoft.SecurityInsights/Watchlists/hva",
      "name": "hva",
      "alias": "hva",
      "displayName": "High Value Assets",
      "description": "List of high value assets in the organization",
      "provider": "Microsoft",
      "source": "Local file",
      "itemsSearchKey": "Hostname",
      "created": "2025-04-20T08:15:30.422179Z",
      "updated": "2025-04-20T08:15:30.422179Z",
      "itemsCount": 10
    }
  ],
  "count": 1,
  "valid": true
}
```

## Usage Notes
- Returns all watchlists in the current Microsoft Sentinel workspace.
- The response includes basic metadata about each watchlist.
- If no watchlists exist, returns an empty list with count 0.
- Handles both MCP server and direct invocation (using environment variables for Azure context if needed).
- All errors are returned as a dict with an `error` key.

## Error Cases
- Azure SecurityInsights client initialization failure.
- Azure authentication errors.
- Insufficient permissions to access watchlists.
- Network or service connectivity issues.

## See Also
- [sentinel_watchlist_get](sentinel_watchlist_get.md) — for retrieving a specific watchlist.
- [sentinel_watchlist_items_list](sentinel_watchlist_items_list.md) — for listing items in a watchlist.
````

## File: resources/tool_docs/sentinel_workspace_get.md
````markdown
# sentinel_workspace_get

## Purpose
Get detailed information about the current Sentinel Log Analytics workspace, including workspace name, resource group, subscription ID, and workspace properties. Returns additional guidance for related data connectors and analytics rules.

## Parameters
| Name                | Type   | Required | Description                                                                 |
|---------------------|--------|----------|-----------------------------------------------------------------------------|
| kwargs              | dict   | No       | Additional arguments for future compatibility (MCP/SSE pattern).            |

## Output Fields
| Key                    | Type         | Description                                                                 |
|------------------------|--------------|-----------------------------------------------------------------------------|
| workspace_name         | str          | The name of the Sentinel Log Analytics workspace.                           |
| resource_group         | str          | The Azure resource group for the workspace.                                 |
| subscription_id        | str          | The Azure subscription ID.                                                  |
| properties             | dict         | Detailed properties about the workspace (location, SKU, retention, etc.).   |
| additional_information | list of str  | Guidance on related tools and next steps.                                   |
| error                  | str (opt)    | Error message if an error occurs.                                           |

## Example Request
```python
result = await tool(ctx, kwargs={})
```

## Example Response
```json
{
  "workspace_name": "<workspace-name>",
  "resource_group": "<resource-group>",
  "subscription_id": "<subscription-id>",
  "properties": {
    "location": "eastus",
    "sku": "pergb2018",
    "sku_description": null,
    "last_sku_update": "",
    "retention_period_days": 30,
    "daily_quota_gb": null,
    "quota_reset_time": "",
    "ingestion_status": null,
    "public_network_access_ingestion": "Enabled",
    "public_network_access_query": "Enabled",
    "created": "2025-04-07T11:31:40.1654851Z",
    "last_modified": "2025-04-07T11:34:21.8036702Z",
    "features": "<features-object>"
  },
  "additional_information": [
    "For data connector details, use the `sentinel_connectors_list` tool.",
    "For analytics rules details, use the `list_analytics_rules` tool."
  ]
}
```

## Usage Notes
- Returns minimal information if Azure SDK or workspace context is missing.
- Supports both MCP server and direct invocation. If `ctx.request_context` is not available, falls back to environment variables for Azure context (`AZURE_TENANT_ID`, `AZURE_CLIENT_ID`, `AZURE_CLIENT_SECRET`, `AZURE_SUBSCRIPTION_ID`, `AZURE_RESOURCE_GROUP`, `AZURE_WORKSPACE_NAME`).
- All errors are returned in the `error` field for testability.

## Error Cases
| Error Message                                      | Meaning                                                      |
|----------------------------------------------------|--------------------------------------------------------------|
| Missing Azure SDK or workspace details; returning minimal info. | Required context or SDK is missing, only basic info returned. |
| Error retrieving workspace info: <exception>        | An exception occurred while querying Azure for workspace info |

## See Also
- [sentinel_connectors_list](sentinel_connectors_list.md)
- [list_analytics_rules](sentinel_analytics_rule_list.md)
````

## File: resources/tool_docs/tool_docs_get.md
````markdown
# Tool Docs Get Tool

**Tool Name:** `tool_docs_get`

## Overview
Returns the raw markdown content for a given documentation path in the `resources/tool_docs` directory.

## Parameters
- `path` (str, required): Relative path to the markdown doc (as returned by `tool_docs_list`).

## Output
- `content` (str): Raw markdown content of the file.
- If error, returns a dict with `error` (str) and may include `available_docs` (list[str]).

## Example Requests
### Get a specific documentation file
```
{
  "path": "sentinel_analytics_rule_get.md"
}
```

## Example Output
```
{
  "content": "# Sentinel Analytics Rule Get Tool

**Tool Name:** `sentinel_analytics_rule_get`
..."
}
```

## Error Handling
- Returns `error` if the file does not exist or is outside the docs directory.
- Returns `available_docs` if the requested file is missing, listing all available docs.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust error handling.
````

## File: resources/tool_docs/tool_docs_list.md
````markdown
# Tool Docs List Tool

**Tool Name:** `tool_docs_list`

## Overview
Enumerates available Sentinel server documentation markdown paths in the `resources/tool_docs` directory.

## Parameters
- `prefix` (str, optional): Only include docs whose relative path starts with this prefix.

## Output
- `paths` (list[str]): List of relative markdown doc paths.
- If error, returns a dict with `error` (str).

## Example Requests
### List all documentation files
```
{
  "prefix": ""
}
```

### List documentation files starting with a specific prefix
```
{
  "prefix": "sentinel_analytics"
}
```

## Example Output
```
{
  "paths": [
    "sentinel_analytics_rule_get.md",
    "sentinel_analytics_rule_list.md",
    "sentinel_analytics_rules_count_by_tactic.md"
  ]
}
```

## Error Handling
- Returns `error` field if the docs directory cannot be read or other errors occur.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust error handling.
````

## File: resources/tool_docs/tool_docs_search.md
````markdown
# Tool Docs Search Tool

**Tool Name:** `tool_docs_search`

## Overview
Performs a full-text search across documentation in the `resources/tool_docs` directory and returns matching paths.

## Parameters
- `query` (str, required): Regex or text to search for in docs.
- `k` (int, optional): Max number of results to return (default: 10).

## Output
- `hits` (list[str]): Relative doc paths containing a match.
- If error, returns a dict with `error` (str).

## Example Requests
### Search for docs containing the word "analytics"
```
{
  "query": "analytics"
}
```

### Search for docs containing the word "incident" (limit 2 results)
```
{
  "query": "incident",
  "k": 2
}
```

## Example Output
```
{
  "hits": [
    "sentinel_analytics_rule_get.md",
    "sentinel_analytics_rule_list.md"
  ]
}
```

## Error Handling
- Returns `error` if the search fails or required parameters are missing.

## MCP Compliance
- Inherits from `MCPToolBase`.
- Implements `async def run(self, ctx, **kwargs)`.
- Registered in `register_tools()`.
- Uses robust error handling.
````

## File: README.md
````markdown
# Microsoft Sentinel MCP Server

A [Model Context Protocol][mcp] (MCP) server for Microsoft Sentinel. This server enables read-only access to a Microsoft Sentinel instance, including advanced querying, incident viewing, and resource exploration for Azure Sentinel environments. It provides a modular and extensible platform for observation-only security operations and analysis.

---

## ⚠️ IMPORTANT SECURITY NOTICE ⚠️

**TEST ENVIRONMENTS ONLY**: This Microsoft Sentinel MCP server only supports read-only operations and is intended exclusively for TEST environments. It is not intended to be connected to production Sentinel instances.

**PRIVACY WARNING**: Connecting this server to a production Microsoft Entra ID (Azure AD) or Sentinel environment may expose sensitive user and directory data to LLM operators or public LLMs. Use only with non-production/test tenants, or a private LLM with MCP support.

**SECURITY WARNING**: Connecting a production Microsoft Sentinel instance to a public LLM poses significant privacy and security risks. Use only private, secured environments for production security operations.

---

## ✨ Features

- **KQL Query Execution**: Run and validate KQL queries, test with mock data
- **Log Analytics Management**: Workspace info, table listings and schemas
- **Security Incidents**: List and view detailed incident information
- **Analytics Rules**: List, view, and analyze by MITRE tactics/techniques
- **Rule Templates**: Access and analyze templates by MITRE framework
- **Hunting Queries**: List, view details, and analyze by tactic
- **Data Connectors**: List and view connector details
- **Watchlists**: Manage watchlists and their items
- **Threat Intelligence**: Domain WHOIS and IP geolocation lookups

- **Metadata & Source Control**: List and view repository details
- **ML Analytics**: Access ML analytics settings
- **Authorization**: View RBAC role assignments
- **Entra ID Users & Groups**: View user and group details from Microsoft Entra ID

---

## 🚀 Quick Start

### 1. Authenticate with Azure CLI

Before using the MCP server, you must have authenticated to Azure with an account that has access to a Microsoft Sentinel workspace:

```bash
az login
```

### 2. Clone the Repository

```bash
git clone https://github.com/dstreefkerk/ms-sentinel-mcp-server.git
cd ms-sentinel-mcp-server
```

### 3. Install with PowerShell Script (Recommended)

Use the provided PowerShell installation script to set up the MCP server:

```powershell
# Run from the repository root directory
.\install.ps1
```

The script will:
- Check for Python installation
- Create a virtual environment and install dependencies
- Generate a Claude Desktop configuration file
- Copy the configuration to your clipboard

After running the script, you can paste the configuration directly into your MCP client (Claude Desktop, Cursor, etc.).

### 4. Use the MCP server

The MCP server will be ready for use after you've configured your MCP client config with the relevant workspace info. 

Just remember that if you're using Azure CLI auth, you need to remove 
`AZURE_CLIENT_ID` and `AZURE_CLIENT_SECRET` from your MCP client config.

---

## 🧰 Tool Reference

Below are the available tools. For full documentation, see the `resources/tool_docs/` directory. Tool names and descriptions are kept in sync with the MCP server's tool registry, so that the MCP Client can retrieve them.

| Tool                                      | Category           | Description                                                      |
|-------------------------------------------|-------------------|------------------------------------------------------------------|
| `entra_id_list_users`                     | Entra ID          | List all users in Microsoft Entra ID (Azure AD)                  |
| `entra_id_get_user`                       | Entra ID          | Get a user by UPN or object ID from Entra ID                     |
| `entra_id_list_groups`                    | Entra ID          | List all groups in Microsoft Entra ID (Azure AD)                 |
| `entra_id_get_group`                      | Entra ID          | Get a group by object ID from Entra ID                           |
| `sentinel_logs_search`                    | KQL               | Run a KQL query against Azure Monitor Logs                       |
| `sentinel_query_validate`                 | KQL               | Validate KQL query syntax locally                                |
| `sentinel_logs_search_with_dummy_data`    | KQL               | Test a KQL query with mock data                                  |
| `sentinel_logs_tables_list`               | Log Analytics     | List available tables in the Log Analytics workspace             |
| `sentinel_logs_table_details_get`         | Log Analytics     | Get details for a Log Analytics table                            |
| `sentinel_logs_table_schema_get`          | Log Analytics     | Get schema for a Log Analytics table                             |
| `sentinel_workspace_get`                  | Log Analytics     | Get workspace information                                        |
| `sentinel_incident_details_get`           | Incidents         | Get detailed information about a specific Sentinel incident      |
| `sentinel_incident_list`                  | Incidents         | List security incidents in Microsoft Sentinel                    |
| `sentinel_analytics_rule_list`            | Analytics Rules   | List all analytics rules with key fields                         |
| `sentinel_analytics_rule_get`             | Analytics Rules   | Get details for a specific analytics rule                        |
| `sentinel_analytics_rules_count_by_tactic`| Analytics Rules   | Count Sentinel analytics rules by tactic                         |
| `sentinel_analytics_rules_count_by_technique` | Analytics Rules | Count Sentinel analytics rules by MITRE technique                |
| `sentinel_analytics_rule_templates_list`  | Rule Templates    | List all Sentinel analytics rule templates                       |
| `sentinel_analytics_rule_template_get`    | Rule Templates    | Get a specific Sentinel analytics rule template                  |
| `sentinel_analytics_rule_templates_count_by_tactic` | Rule Templates | Count Sentinel analytics rule templates by tactic         |
| `sentinel_analytics_rule_templates_count_by_technique` | Rule Templates | Count Sentinel analytics rule templates by MITRE technique |
| `sentinel_hunting_queries_list`           | Hunting           | List all Sentinel hunting queries with optional filtering         |
| `sentinel_hunting_query_get`              | Hunting           | Get full details of a Sentinel hunting query by name or ID       |
| `sentinel_hunting_queries_count_by_tactic`| Hunting           | Count Sentinel hunting queries by tactic                         |
| `sentinel_connectors_list`                | Data Connectors   | List data connectors                                             |
| `sentinel_connectors_get`                 | Data Connectors   | Get a specific data connector by ID                              |
| `sentinel_watchlists_list`                | Watchlists        | List all Sentinel watchlists                                     |
| `sentinel_watchlist_get`                  | Watchlists        | Get a specific Sentinel watchlist                                |
| `sentinel_watchlist_items_list`           | Watchlists        | List all items in a Sentinel watchlist                           |
| `sentinel_watchlist_item_get`             | Watchlists        | Get a specific item from a Sentinel watchlist                    |
| `sentinel_domain_whois_get`               | Threat Intel      | Get WHOIS information for a domain                               |
| `sentinel_ip_geodata_get`                 | Threat Intel      | Get geolocation data for an IP address                           |
| `sentinel_metadata_list`                  | Metadata          | List all Sentinel metadata in the current workspace              |
| `sentinel_metadata_get`                   | Metadata          | Get details for specific Sentinel metadata by ID                 |
| `sentinel_source_controls_list`           | Source Control    | List all Sentinel source controls in the current workspace       |
| `sentinel_source_control_get`             | Source Control    | Get details for a specific Sentinel source control by ID         |
| `sentinel_ml_analytics_settings_list`     | ML Analytics      | List all Sentinel ML analytics settings                          |
| `sentinel_ml_analytics_setting_get`       | ML Analytics      | Get a specific Sentinel ML analytics setting by name             |
| `sentinel_authorization_summary`          | Authorization     | Summarize Azure RBAC role assignments for Sentinel access        |
| `log_analytics_saved_searches_list`       | Saved Searches    | List all saved searches in a Log Analytics workspace             |
| `log_analytics_saved_search_get`          | Saved Searches    | Get a specific saved search from a Log Analytics workspace       |
---

## 🛠️ Usage

### Installing in Claude Desktop or similar Environments

Use the provided PowerShell installation script to set up the MCP server for Claude Desktop or other MCP-compatible clients:

```powershell
# Run from the repository root directory
.\install.ps1
```

The script will:
1. Check for Python installation
2. Create a virtual environment and install dependencies
3. Run post-installation steps
4. Generate a Claude Desktop configuration file
5. Copy the configuration to your clipboard

After running the script, you can paste the configuration directly into your MCP client (Claude Desktop, Cursor, etc.). The script generates Claude-compatible MCP Server configuration. Keep this in mind if you're going to use a different MCP client.

### Advanced Installation Options

#### Manual Environment Setup

If you prefer to set up the environment manually:

1. **Configure Environment Variables**

   Copy the provided template and fill in your Azure credentials:

   ```bash
   cp .env.example .env
   # Edit .env and set:
   # AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_SUBSCRIPTION_ID, AZURE_RESOURCE_GROUP, AZURE_WORKSPACE_NAME, AZURE_WORKSPACE_ID
   ```

2. **Install Dependencies (with uv)**

   ```bash
   uv venv
   uv pip install -e .
   ```

3. **Alternative Server Run Options**

   **Using MCP CLI:**
   ```bash
   mcp run wrapper.py
   ```

   **Development & Hot Reload:**
   ```bash
   mcp dev wrapper.py
   ```

   **SSE Mode (for IDEs):**
   ```bash
   python wrapper.py --sse
   ```

### Inspector UI

The MCP Inspector UI is available at http://127.0.0.1:6274 when running in dev mode (`mcp dev wrapper.py`).

---

## 🧩 Development

- **Resources:** Add Python files to `resources/` and implement a `register_resources(mcp)` function.
- **Tools:** Add Python files to `tools/` and implement a `register_tools(mcp)` function. Tools must follow the structure defined in `docs/tool-architecture-and-implementation-requirements.md`.
- **Prompts:** Add prompt templates to `prompts/` for LLM-driven workflows.

All components in the `resources/`, `tools/`, and `prompts/` directories are auto-discovered and registered at server startup. No manual imports are needed.

---

## 🔐 Authentication & Environment Variables

The MCP Server supports any authentication method supported by the Azure Python SDK's `DefaultAzureCredential`.

### Service Principal authentication instead of Azure CLI

Set up an App Registration in Azure and assign the following roles:

- `Log Analytics Reader`
- `Microsoft Sentinel Reader`

If you're feeling brave, you can also grant the App Registration the following Microsoft Graph permissions:

- `User.Read.All`
- `Group.Read.All`

Then, use the following environment variables in your `.env` file or MCP Server configuration:

- `AZURE_TENANT_ID`
- **`AZURE_CLIENT_ID`**
- **`AZURE_CLIENT_SECRET`**
- `AZURE_SUBSCRIPTION_ID`
- `AZURE_RESOURCE_GROUP`
- `AZURE_WORKSPACE_NAME`
- `AZURE_WORKSPACE_ID`

See `.env.example` for a template.

### Azure CLI Authentication

```bash
az login
```

If you use Azure CLI authentication, you can omit `AZURE_CLIENT_SECRET` and `AZURE_CLIENT_ID` from your config.

---

## 🐛 Debugging

Enable debug mode by setting the `MCP_DEBUG_LOG` environment variable to `true` in your `.env` file:

```
MCP_DEBUG_LOG=true
```

Logs are written to your temp directory as `sentinel_mcp_server.log`.

---

## 📄 License

This project is licensed under the [MIT License](LICENSE).

[mcp]: https://modelcontextprotocol.io/
````
